{"version":3,"sources":["components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","visible","toggleDialog","setState","style","display","justifyContent","this","title","onClose","margin","textAlign","className","onClick","width","src","CardTitle","CardSubtitle","color","React","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAuFeA,E,4MAjFXC,MAAQ,CACJC,SAAS,G,EAGbC,aAAe,WACX,EAAKC,SAAS,CACVF,SAAU,EAAKD,MAAMC,W,4CAG7B,WACI,OACE,uBAAKG,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAE7C,2BACCC,KAAKP,MAAMC,SAAW,gBAAC,IAAD,CAAQO,MAAO,iBAAkBC,QAASF,KAAKL,cACpE,qBAAGE,MAAO,CAAEM,OAAQ,OAAQC,UAAW,WAAvC,+CACA,gBAAC,IAAD,KACE,0BAAQC,UAAU,WAAWC,QAASN,KAAKL,cAA3C,MACA,0BAAQU,UAAU,WAAWC,QAASN,KAAKL,cAA3C,UAIH,uBAAKE,MAAO,CAACU,MAAO,QACnB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAWC,IAAI,iGACf,2BACE,gBAAC,IAAD,KACA,sBAAIC,WAAW,GAAf,kCACE,uBAAKC,cAAc,GACjB,wBAAML,UAAU,WACd,wBAAMA,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,4BAChB,4DAIN,gBAAC,IAAD,KACE,sLAGF,gBAAC,IAAD,KACA,0BAAQA,UAAU,4BAA4BC,QAASN,KAAKL,cAA5D,gBAKN,uBAAKE,MAAO,CAACU,MAAO,QAClB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAWC,IAAI,sGACf,2BACE,gBAAC,IAAD,KACA,sBAAIC,WAAW,GAAf,qCACE,uBAAKC,cAAc,GACjB,wBAAML,UAAU,WACd,wBAAMA,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,kBAAkBR,MAAO,CAAEc,MAAO,aAClD,wBAAMN,UAAU,4BAChB,4DAIN,gBAAC,IAAD,KACE,sLAGF,gBAAC,IAAD,KACE,0BAAQA,UAAU,4BAA4BC,QAASN,KAAKL,cAA5D,qB,GAxEDiB,aCWJC,MAXf,WACE,OACE,kBAAC,IAAD,KACI,yBAAKR,UAAU,WACb,wBAAIR,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAA9C,YACA,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWxB,OCEvByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56247d1d.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\r\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardImage, CardSubtitle } from '@progress/kendo-react-layout';\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        visible: false\r\n    };\r\n    \r\n    toggleDialog = () => {\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n          <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            {/* Modal code goes here */}\r\n            <div>\r\n            {this.state.visible && <Dialog title={\"Please confirm\"} onClose={this.toggleDialog}>\r\n              <p style={{ margin: \"25px\", textAlign: \"center\" }}>Do you want to continue to pay with Paypal?</p>\r\n              <DialogActionsBar>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>No</button>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>Yes</button>\r\n              </DialogActionsBar>\r\n            </Dialog>}\r\n          </div>\r\n             <div style={{width: '45%'}}>\r\n              <Card>\r\n                <CardImage src=\"https://wander-lush.org/wp-content/uploads/2021/01/Medellin-Airbnb-Penthouse-in-Laureles.jpg\" />\r\n                <div>\r\n                  <CardHeader>\r\n                  <h1 CardTitle={true}>Comfy 1 Bedroom Condo Downtown</h1>\r\n                    <div CardSubtitle={true}>\r\n                      <span className=\"reviews\">\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star-outline\" />\r\n                        <div>$200/night (3 nights min.)</div>\r\n                      </span>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <p>The right place to be if you're in NYC, it comes with a pool, wifi access and a free parking lot where you can also smoke and have parties with friends. \r\n                    </p>\r\n                  </CardBody>\r\n                  <CardActions>\r\n                  <button className=\"k-button k-primary k-flat\" onClick={this.toggleDialog}>Book Now</button>\r\n                  </CardActions>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n            <div style={{width: '45%'}}>\r\n              <Card>\r\n                <CardImage src=\"https://media.cntraveler.com/photos/5e9907c14ab09800086faf63/master/pass/airbnb-view-37143825.jpg\" />\r\n                <div>\r\n                  <CardHeader>\r\n                  <h1 CardTitle={true}>Modern English Basement Apartment</h1>\r\n                    <div CardSubtitle={true}>\r\n                      <span className=\"reviews\">\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star\" style={{ color: '#ffce2a' }} />\r\n                        <span className=\"k-icon k-i-star-outline\" />\r\n                        <div>$200/night (3 nights min.)</div>\r\n                      </span>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <p>The right place to be if you're in NYC, it comes with a pool, wifi access and a free parking lot where you can also smoke and have parties with friends. \r\n                    </p>\r\n                  </CardBody>\r\n                  <CardActions>\r\n                    <button className=\"k-button k-primary k-flat\" onClick={this.toggleDialog}>Book Now</button>\r\n                  </CardActions>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, {useState} from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"content\">\n          <h2 style={{ display: 'flex', justifyContent: 'space-evenly' }}>KendoBnB</h2>\n          <Route exact path=\"/\" component={Home} />\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}