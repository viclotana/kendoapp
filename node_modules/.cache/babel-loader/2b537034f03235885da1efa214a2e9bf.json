{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { PanelBarItem } from './PanelBarItem';\nimport { renderChildren, getInitialState } from './util';\nimport { SelectionService } from './services/selectionService';\nimport { NavigationService, NavigationAction } from './services/navigationService';\nimport { classNames } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n\nvar PanelBar =\n/** @class */\nfunction (_super) {\n  __extends(PanelBar, _super);\n\n  function PanelBar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._element = null;\n    /**\n     * @hidden\n     */\n\n    _this.handleSelect = function (event) {\n      var state = __assign({}, _this.state, {\n        selected: _this.selected\n      });\n\n      _this._selectionService.select(event.uniquePrivateKey, renderChildren(_this.props.animation, state, _this.handleSelect, _this.props.children), state.expanded);\n\n      _this._selectionService.focus(event.uniquePrivateKey, 0, renderChildren(_this.props.animation, state, _this.handleSelect, _this.props.children));\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onSelect = function (child, expanded) {\n      _this.setState({\n        selected: child.props.uniquePrivateKey,\n        expanded: expanded\n      }, function () {\n        if (_this.props.onSelect) {\n          _this.props.onSelect.call(undefined, {\n            target: child,\n            action: 'select'\n          });\n        }\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onFocus = function (child) {\n      _this.activeDescendant = child.props.id;\n\n      _this.setState({\n        focused: child.props.uniquePrivateKey\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onNavigate = function (action) {\n      var state = __assign({}, _this.state, {\n        selected: _this.selected\n      });\n\n      switch (action) {\n        case NavigationAction.Previous:\n          _this._selectionService.focus(state.focused, -1, renderChildren(_this.props.animation, state, _this.handleSelect, _this.props.children));\n\n          break;\n\n        case NavigationAction.Next:\n          _this._selectionService.focus(state.focused, 1, renderChildren(_this.props.animation, state, _this.handleSelect, _this.props.children));\n\n          break;\n\n        case NavigationAction.Toggle:\n          _this._selectionService.select(state.focused, renderChildren(_this.props.animation, state, _this.handleSelect, _this.props.children), state.expanded);\n\n          break;\n\n        default:\n      }\n    };\n\n    _this.handleWrapperFocus = function () {\n      clearTimeout(_this.nextTickId);\n\n      if (!_this.state.wrapperFocused) {\n        _this.setState({\n          wrapperFocused: true\n        });\n      }\n    };\n\n    _this.handleWrapperBlur = function () {\n      _this.nextTick(function () {\n        _this.setState({\n          wrapperFocused: false\n        });\n      });\n    };\n\n    _this.handleKeyDown = function (event) {\n      var rtl = _this._element && getComputedStyle(_this._element).direction === 'rtl' || false;\n      var target = event.target,\n          currentTarget = event.currentTarget;\n\n      if (target === currentTarget) {\n        _this._navigationService.navigate(event, rtl);\n      }\n    };\n\n    validatePackage(packageMetadata);\n    _this.state = getInitialState(props, props.expandMode || 'multiple');\n    _this._selectionService = new SelectionService(_this.onSelect, _this.onFocus, _this.props.expandMode || 'multiple');\n    _this._navigationService = new NavigationService(_this.onNavigate);\n    return _this;\n  }\n\n  Object.defineProperty(PanelBar.prototype, \"selected\", {\n    get: function () {\n      var _a = this.props.selected,\n          selected = _a === void 0 ? this.state.selected : _a;\n      return selected;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  PanelBar.prototype.componentDidUpdate = function (prevProps) {\n    var newProps = this.props;\n\n    if (newProps.expandMode !== prevProps.expandMode) {\n      this._selectionService.setExpandMode(newProps.expandMode);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  PanelBar.prototype.render = function () {\n    var _this = this;\n\n    var ariaProps = {\n      'aria-activedescendant': this.activeDescendant\n    };\n\n    var state = __assign({}, this.state, {\n      selected: this.selected\n    });\n\n    var children = renderChildren(this.props.animation, state, this.handleSelect, this.props.children);\n    var className = classNames('k-widget', 'k-panelbar', this.props.className);\n    return React.createElement(\"div\", __assign({\n      ref: function (div) {\n        _this._element = div;\n      },\n      dir: this.props.dir,\n      role: 'tree',\n      tabIndex: 0,\n      onKeyDown: this.handleKeyDown,\n      onFocus: this.handleWrapperFocus,\n      onBlur: this.handleWrapperBlur,\n      className: className,\n      style: this.props.style\n    }, ariaProps), children);\n  };\n\n  PanelBar.prototype.nextTick = function (f) {\n    // XXX: use window.setTimeout due to async focus/blur events in IE, and missing relatedTarget prop.\n    // XXX: https://github.com/facebook/react/issues/3751\n    // Handles multiple focus events happening at the same time.\n    clearTimeout(this.nextTickId);\n    this.nextTickId = window.setTimeout(function () {\n      return f();\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  PanelBar.propTypes = {\n    animation: PropTypes.bool,\n    children: function (props, propName) {\n      var prop = props[propName];\n\n      if (prop) {\n        if (Array.isArray(prop)) {\n          for (var _i = 0, prop_1 = prop; _i < prop_1.length; _i++) {\n            var value = prop_1[_i];\n\n            if (!value.type || value.type !== PanelBarItem) {\n              return new Error('PanelBar children should be either PanelBarItem or Array of PanelBarItem.');\n            }\n          }\n        } else {\n          if (prop.type !== PanelBarItem) {\n            return new Error('PanelBar child should be either PanelBarItem or Array of PanelBarItem.');\n          }\n        }\n      }\n    },\n    dir: PropTypes.string,\n    selected: PropTypes.string,\n    expanded: PropTypes.arrayOf(PropTypes.string),\n    focused: PropTypes.string,\n    expandMode: PropTypes.oneOf(['single', 'multiple']),\n    className: PropTypes.string,\n    onSelect: PropTypes.func,\n    style: PropTypes.object\n  };\n  /**\n   * @hidden\n   */\n\n  PanelBar.defaultProps = {\n    expandMode: 'multiple',\n    animation: true\n  };\n  return PanelBar;\n}(React.Component);\n\nexport { PanelBar };","map":null,"metadata":{},"sourceType":"module"}