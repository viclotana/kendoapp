{"ast":null,"code":"export default function groupInteger(number, start, end, options, info) {\n  var symbols = info.numbers.symbols;\n  var decimalIndex = number.indexOf(symbols.decimal);\n  var groupSizes = options.groupSize.slice();\n  var groupSize = groupSizes.shift();\n  var integerEnd = decimalIndex !== -1 ? decimalIndex : end + 1;\n  var integer = number.substring(start, integerEnd);\n  var result = number;\n  var integerLength = integer.length;\n\n  if (integerLength >= groupSize) {\n    var idx = integerLength;\n    var parts = [];\n\n    while (idx > -1) {\n      var value = integer.substring(idx - groupSize, idx);\n\n      if (value) {\n        parts.push(value);\n      }\n\n      idx -= groupSize;\n      var newGroupSize = groupSizes.shift();\n      groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;\n\n      if (groupSize === 0) {\n        value = integer.substring(0, idx);\n\n        if (value) {\n          parts.push(value);\n        }\n\n        break;\n      }\n    }\n\n    integer = parts.reverse().join(symbols.group);\n    result = number.substring(0, start) + integer + number.substring(integerEnd);\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}