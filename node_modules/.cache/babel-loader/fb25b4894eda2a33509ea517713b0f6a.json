{"ast":null,"code":"/**\n * @hidden\n */\nvar MouseOverHandler =\n/** @class */\nfunction () {\n  function MouseOverHandler(openOnClick, resetMenu, openItem) {\n    this.openOnClick = openOnClick;\n    this.resetMenu = resetMenu;\n    this.openItem = openItem;\n    this.openOnClick = openOnClick;\n    this.isMouseOverEnabled = openOnClick ? false : true;\n  }\n\n  Object.defineProperty(MouseOverHandler.prototype, \"OpenOnClick\", {\n    set: function (value) {\n      if (Boolean(value) !== Boolean(this.openOnClick)) {\n        this.mouseDown = false;\n        this.isMouseOverEnabled = value ? false : true;\n      }\n\n      this.openOnClick = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MouseOverHandler.prototype.handleItemSelectedViaKeyboard = function () {\n    if (this.openOnClick) {\n      this.isMouseOverEnabled = false;\n      this.resetMenu();\n    }\n  };\n\n  Object.defineProperty(MouseOverHandler.prototype, \"IsMouseOverEnabled\", {\n    get: function () {\n      return this.isMouseOverEnabled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MouseOverHandler.prototype.handleItemMouseDown = function () {\n    this.mouseDown = true;\n  };\n\n  MouseOverHandler.prototype.handleItemFocus = function () {\n    // Keep opening on mouse over upon tabbing\n    // and keyboard navigation. However, discard the event\n    // upon click because a cycle occurs and the item does not open.\n    if (this.openOnClick && !this.mouseDown) {\n      this.isMouseOverEnabled = true;\n    }\n\n    this.mouseDown = false;\n  };\n\n  MouseOverHandler.prototype.handleItemClick = function (itemId, clickedItemIsWithDefaultClose) {\n    if (this.openOnClick) {\n      if (this.isMouseOverEnabled) {\n        if (clickedItemIsWithDefaultClose) {\n          this.isMouseOverEnabled = false;\n          this.resetMenu();\n        }\n      } else {\n        this.isMouseOverEnabled = true;\n        this.openItem(itemId);\n      }\n    }\n  };\n\n  return MouseOverHandler;\n}();\n\nexport { MouseOverHandler };","map":null,"metadata":{},"sourceType":"module"}