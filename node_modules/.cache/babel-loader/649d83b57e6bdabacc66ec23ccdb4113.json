{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, focusFirstFocusableChild } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact AppBarSpacer component]({% slug contentarrangement_appbar %}#toc-defining-spacings).\n * Used to give additional white space between the AppBar sections and provides a way for customizing its width.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *       <AppBar>\n *           <AppBarSection>\n *               <span className=\"k-icon k-i-menu\" />\n *           </AppBarSection>\n *\n *           <AppBarSpacer style={{ width: 8 }} />\n *\n *           <AppBarSection>\n *               <h1 className=\"title\">{tc.text} AppBar</h1>\n *           </AppBarSection>\n *\n *           <AppBarSpacer />\n *\n *           <AppBarSection>\n *               <BadgeContainer>\n *                   <span className=\"k-icon k-i-bell\" />\n *                   <Badge themeColor=\"info\" shape=\"dot\" />\n *               </BadgeContainer>\n *           </AppBarSection>\n *      </AppBar>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var AppBarSpacer = React.forwardRef(function (props, target) {\n  var children = props.children,\n      className = props.className,\n      style = props.style;\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var spacerClasses = React.useMemo(function () {\n    return classNames('k-appbar-spacer', {\n      'k-appbar-spacer-sized': style && style.width && style.width !== null\n    }, className);\n  }, [className, style]);\n  var spacerStyles = React.useMemo(function () {\n    return {\n      flexBasis: style && style.width ? style.width : undefined\n    };\n  }, [style]);\n  return React.createElement(\"span\", {\n    className: spacerClasses,\n    style: spacerStyles\n  }, children);\n});\nAppBarSpacer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\nAppBarSpacer.displayName = 'KendoAppBarSpacer';","map":null,"metadata":{},"sourceType":"module"}