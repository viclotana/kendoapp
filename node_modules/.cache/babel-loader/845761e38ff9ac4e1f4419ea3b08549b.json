{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, focusFirstFocusableChild, guid } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\n * Used to display information, actions, branding titles and additional navigation on the current screen.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *       <AppBar>\n *           <AppBarSection>\n *               <span className=\"k-icon k-i-menu\" />\n *           </AppBarSection>\n *\n *           <AppBarSpacer style={{ width: 8 }} />\n *\n *           <AppBarSection>\n *               <h1 className=\"title\">{tc.text} AppBar</h1>\n *           </AppBarSection>\n *\n *           <AppBarSpacer />\n *\n *           <AppBarSection>\n *               <BadgeContainer>\n *                   <span className=\"k-icon k-i-bell\" />\n *                   <Badge themeColor=\"info\" shape=\"dot\" />\n *               </BadgeContainer>\n *           </AppBarSection>\n *      </AppBar>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var AppBar = React.forwardRef(function (props, target) {\n  validatePackage(packageMetadata);\n  var children = props.children,\n      className = props.className,\n      style = props.style,\n      id = props.id;\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var themeColor = React.useMemo(function () {\n    return props.themeColor || defaultProps.themeColor;\n  }, [props.themeColor]);\n  var position = React.useMemo(function () {\n    return props.position || defaultProps.position;\n  }, [props.position]);\n  var positionMode = React.useMemo(function () {\n    return props.positionMode || defaultProps.positionMode;\n  }, [props.positionMode]);\n  var appbarClasses = React.useMemo(function () {\n    return classNames('k-appbar', {\n      'k-appbar-top': position === 'top',\n      'k-appbar-bottom': position === 'bottom',\n      'k-appbar-static': positionMode === 'static',\n      'k-appbar-sticky': positionMode === 'sticky',\n      'k-appbar-fixed': positionMode === 'fixed',\n      'k-appbar-light': themeColor === 'light',\n      'k-appbar-dark': themeColor === 'dark',\n      'k-appbar-inherit': themeColor === 'inherit'\n    }, className);\n  }, [position, positionMode, themeColor, className]);\n  return React.createElement(\"div\", {\n    className: appbarClasses,\n    style: style,\n    id: id || calculatedId\n  }, children);\n});\nAppBar.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  id: PropTypes.string,\n  themeColor: PropTypes.string,\n  position: PropTypes.oneOf(['top', 'bottom']),\n  positionMode: PropTypes.oneOf(['static', 'sticky', 'fixed'])\n};\nvar defaultProps = {\n  themeColor: 'light',\n  position: 'top',\n  positionMode: 'static'\n};\nAppBar.displayName = 'KendoAppBar';","map":null,"metadata":{},"sourceType":"module"}