{"ast":null,"code":"import * as React from 'react';\nimport { isArrayEqual } from '../util';\n/**\n * @hidden\n */\n\nvar SelectionService =\n/** @class */\nfunction () {\n  function SelectionService(onSelectCallback, onFocusCallback, expandMode) {\n    var _this = this;\n\n    this.flatChildren = function (children, flattenChildren) {\n      if (flattenChildren === void 0) {\n        flattenChildren = [];\n      }\n\n      React.Children.forEach(children, function (child) {\n        if (child && child.props && !child.props.disabled) {\n          flattenChildren.push(child);\n\n          if (child.props.children) {\n            _this.flatChildren(child.props.children, flattenChildren);\n          }\n        }\n      });\n      return flattenChildren;\n    };\n\n    this.flatVisibleChildren = function (children, flattenVisibleChildren) {\n      if (flattenVisibleChildren === void 0) {\n        flattenVisibleChildren = [];\n      }\n\n      React.Children.forEach(children, function (child) {\n        if (child && child.props && !child.props.disabled && (child.props.expanded || child.props.parentExpanded)) {\n          flattenVisibleChildren.push(child);\n\n          if (child.props.children) {\n            _this.flatVisibleChildren(child.props.children, flattenVisibleChildren);\n          }\n        }\n      });\n      return flattenVisibleChildren;\n    };\n\n    this.onSelect = onSelectCallback;\n    this.onFocus = onFocusCallback;\n    this.expandMode = expandMode;\n  }\n\n  SelectionService.prototype.select = function (uniquePrivateKey, children, expanded) {\n    var flattenChildren = this.flatChildren(React.Children.toArray(children));\n    var selectedChild;\n    var newExpanded;\n    flattenChildren.forEach(function (child) {\n      if (child.props.uniquePrivateKey === uniquePrivateKey) {\n        selectedChild = child;\n      }\n    });\n\n    switch (this.expandMode) {\n      case 'single':\n        newExpanded = selectedChild.props.parentUniquePrivateKey.concat([selectedChild.props.uniquePrivateKey]);\n\n        if (isArrayEqual(expanded, newExpanded)) {\n          if (selectedChild.props.parentUniquePrivateKey) {\n            newExpanded = selectedChild.props.parentUniquePrivateKey.slice();\n          } else {\n            newExpanded = [];\n          }\n        }\n\n        break;\n\n      case 'multiple':\n        newExpanded = expanded.slice();\n        var index = newExpanded.indexOf(selectedChild.props.uniquePrivateKey);\n        index === -1 ? newExpanded.push(selectedChild.props.uniquePrivateKey) : newExpanded.splice(index, 1);\n        break;\n\n      default:\n        newExpanded = expanded.slice();\n        break;\n    }\n\n    this.onSelect(selectedChild, newExpanded);\n  };\n\n  SelectionService.prototype.focus = function (currentFocus, step, children) {\n    var flattenChildren = this.flatVisibleChildren(React.Children.toArray(children));\n    var focusedChild;\n    flattenChildren.forEach(function (child, ixd) {\n      if (child.props.uniquePrivateKey === currentFocus) {\n        var index = ixd + step < 0 ? 0 : ixd + step >= flattenChildren.length ? flattenChildren.length - 1 : ixd + step;\n        focusedChild = flattenChildren[index];\n      }\n    });\n    this.onFocus(focusedChild);\n  };\n\n  SelectionService.prototype.setExpandMode = function (expandMode) {\n    this.expandMode = expandMode;\n  };\n\n  return SelectionService;\n}();\n\nexport { SelectionService };","map":null,"metadata":{},"sourceType":"module"}