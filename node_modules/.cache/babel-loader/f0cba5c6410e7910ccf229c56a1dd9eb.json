{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { shouldOpenItem, isFirstItemFromSiblings } from '../utils/itemsIdsUtils';\nimport { getPopupSettings, convertBoolDirectionToString, getDOMElementId } from '../utils/misc';\nimport { MenuItemLink } from './MenuItemLink';\nimport { MenuItemInternalsList } from './MenuItemInternalsList';\nimport { MenuItemArrow } from './MenuItemArrow';\n/**\n * @hidden\n */\n\nvar MenuItemInternal =\n/** @class */\nfunction (_super) {\n  __extends(MenuItemInternal, _super);\n\n  function MenuItemInternal(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.isFirstRender = true;\n\n    _this.onMouseOver = function (event) {\n      _this.props.onMouseOver(_this.props.item.id);\n\n      event.stopPropagation();\n    };\n\n    _this.onMouseLeave = function (event) {\n      _this.props.onMouseLeave(_this.props.item.id);\n\n      event.stopPropagation();\n    };\n\n    _this.state = {\n      opened: false\n    };\n    return _this;\n  }\n\n  MenuItemInternal.prototype.componentDidMount = function () {\n    var focusedItemId = this.props.focusedItemId;\n    var currentItemId = this.props.item.id; // If the menu item component has been just mounted due to\n    // keyboard navigation and it is the selected one.\n\n    if (focusedItemId && focusedItemId === currentItemId) {\n      this.itemElement.focus();\n    }\n\n    this.isFirstRender = false;\n  };\n\n  MenuItemInternal.prototype.componentDidUpdate = function (prevProps) {\n    var focusedItemId = this.props.focusedItemId;\n    var currentItemId = this.props.item.id;\n\n    if (focusedItemId) {\n      // If the item has been navigated to via the keyboard navigation\n      // (Clicking and focusing an item also come here).\n      if (prevProps.focusedItemId !== focusedItemId && focusedItemId === currentItemId // https://github.com/telerik/kendo-react/issues/216 :\n      // No need to focus the wrapping menu item DOM element\n      // when a child DOM element was clicked.\n      && !this.itemElement.contains(document.activeElement)) {\n        this.itemElement.focus();\n      }\n    } else if (document.activeElement === this.itemElement) {\n      this.itemElement.blur();\n    }\n  };\n\n  MenuItemInternal.prototype.render = function () {\n    var _this = this;\n\n    var item = this.props.item;\n    var itemId = item.id;\n    return [React.createElement(\"li\", {\n      className: this.getMenuItemClassName(item),\n      style: item.cssStyle,\n      tabIndex: itemId === this.props.tabbableItemId ? 0 : -1,\n      onMouseOver: this.onMouseOver,\n      onMouseLeave: this.onMouseLeave,\n      onMouseDown: function (event) {\n        return _this.props.onMouseDown(event);\n      },\n      onBlur: function () {\n        return _this.props.onBlur(itemId);\n      },\n      onFocus: function () {\n        return _this.props.onFocus(itemId);\n      },\n      onClick: function (event) {\n        return _this.props.onClick(event, itemId);\n      },\n      role: \"menuitem\",\n      \"aria-disabled\": item.disabled ? true : undefined,\n      \"aria-haspopup\": item.items.length > 0 ? true : undefined,\n      \"aria-expanded\": item.items.length > 0 ? this.Opened : undefined,\n      \"aria-label\": item.text,\n      \"aria-owns\": this.Opened ? getDOMElementId(this.props.menuGuid, itemId) : undefined,\n      ref: function (el) {\n        return _this.itemElement = el;\n      },\n      key: \"0\"\n    }, this.contentRender ? this.renderContent() : this.renderMenuItemLink()), this.renderPopupIfOpened()];\n  };\n\n  MenuItemInternal.prototype.renderContent = function () {\n    var itemId = this.props.item.contentParentItemId;\n    return React.createElement(\"div\", {\n      className: \"k-content\",\n      role: \"presentation\"\n    }, React.createElement(this.contentRender, {\n      item: this.props.onOriginalItemNeeded(itemId),\n      itemId: itemId\n    }));\n  };\n\n  MenuItemInternal.prototype.renderMenuItemLink = function () {\n    var item = this.props.item;\n\n    if (this.linkRender) {\n      return React.createElement(this.linkRender, {\n        item: this.props.onOriginalItemNeeded(item.id),\n        itemId: item.id,\n        opened: this.Opened,\n        dir: convertBoolDirectionToString(this.props.isDirectionRightToLeft)\n      });\n    } else {\n      var textOrItemRender = this.itemRender ? React.createElement(this.itemRender, {\n        item: this.props.onOriginalItemNeeded(item.id),\n        itemId: item.id,\n        key: \"1\"\n      }) : item.text;\n      return React.createElement(MenuItemLink, {\n        url: item.url,\n        opened: this.Opened\n      }, [this.renderMenuIconIfApplicable(), textOrItemRender, this.renderArrowIfApplicable()]);\n    }\n  };\n\n  MenuItemInternal.prototype.renderPopupIfOpened = function () {\n    if (this.Opened) {\n      var itemId = this.props.item.id;\n\n      var _a = getPopupSettings(itemId, this.props.isMenuVertical, this.props.isDirectionRightToLeft),\n          anchorAlign = _a.anchorAlign,\n          popupAlign = _a.popupAlign,\n          collision = _a.collision;\n\n      return React.createElement(Popup, {\n        anchor: this.itemElement,\n        show: true,\n        popupClass: this.getPopupClassName(),\n        anchorAlign: anchorAlign,\n        popupAlign: popupAlign,\n        collision: collision,\n        animate: false,\n        key: \"1\"\n      }, React.createElement(MenuItemInternalsList, {\n        parentItemId: itemId,\n        items: this.props.item.items,\n        menuGuid: this.props.menuGuid,\n        focusedItemId: this.props.focusedItemId,\n        lastItemIdToBeOpened: this.props.lastItemIdToBeOpened,\n        tabbableItemId: this.props.tabbableItemId,\n        itemRender: this.props.itemRender,\n        linkRender: this.props.linkRender,\n        isMenuVertical: this.props.isMenuVertical,\n        isDirectionRightToLeft: this.props.isDirectionRightToLeft,\n        className: \"k-group k-menu-group k-reset\",\n        onMouseOver: this.props.onMouseOver,\n        onMouseLeave: this.props.onMouseLeave,\n        onMouseDown: this.props.onMouseDown,\n        onBlur: this.props.onBlur,\n        onFocus: this.props.onFocus,\n        onClick: this.props.onClick,\n        onOriginalItemNeeded: this.props.onOriginalItemNeeded\n      }));\n    } else {\n      return null;\n    }\n  };\n\n  MenuItemInternal.prototype.renderMenuIconIfApplicable = function () {\n    return this.props.item.icon ? React.createElement(\"span\", {\n      className: \"k-icon k-i-\" + this.props.item.icon,\n      role: \"presentation\",\n      key: \"0\"\n    }) : null;\n  };\n\n  MenuItemInternal.prototype.renderArrowIfApplicable = function () {\n    return this.props.item.items.length > 0 ? React.createElement(MenuItemArrow, {\n      itemId: this.props.item.id,\n      verticalMenu: this.props.isMenuVertical,\n      dir: convertBoolDirectionToString(this.props.isDirectionRightToLeft),\n      key: \"2\"\n    }) : null;\n  };\n\n  Object.defineProperty(MenuItemInternal.prototype, \"itemRender\", {\n    get: function () {\n      return this.props.item.render || this.props.itemRender;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MenuItemInternal.prototype, \"linkRender\", {\n    get: function () {\n      return this.props.item.linkRender || this.props.linkRender;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MenuItemInternal.prototype, \"contentRender\", {\n    get: function () {\n      return this.props.item.contentParentItemId ? this.props.item.contentRender : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MenuItemInternal.prototype, \"Opened\", {\n    get: function () {\n      var props = this.props;\n      return props.item.items.length > 0 && shouldOpenItem(props.item.id, props.lastItemIdToBeOpened) && // HACK: Wait for the second render because otherwise the scenario of\n      // popup inside popup throws an error (for example, hover of item with id '0_0').\n      !this.isFirstRender;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MenuItemInternal.prototype.getPopupClassName = function () {\n    return classNames('k-menu-popup', {\n      'k-rtl': this.props.isDirectionRightToLeft\n    });\n  };\n\n  MenuItemInternal.prototype.getMenuItemClassName = function (item) {\n    return classNames('k-item', 'k-menu-item', {\n      'k-first': isFirstItemFromSiblings(item.id),\n      'k-last': item.isLastFromSiblings,\n      'k-state-disabled': item.disabled\n    }, item.cssClass);\n  };\n\n  return MenuItemInternal;\n}(React.Component);\n\nexport { MenuItemInternal };","map":null,"metadata":{},"sourceType":"module"}