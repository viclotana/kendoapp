{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { PanelBarItem } from './PanelBarItem';\n/**\n * @hidden\n */\n\nexport var renderChildren = function (animation, state, handleSelect, children, parentExpanded, root, parentPrivateKey) {\n  if (animation === void 0) {\n    animation = true;\n  }\n\n  if (parentExpanded === void 0) {\n    parentExpanded = true;\n  }\n\n  if (root === void 0) {\n    root = true;\n  }\n\n  if (parentPrivateKey === void 0) {\n    parentPrivateKey = [];\n  }\n\n  return React.Children.map(children, function (child, idx) {\n    if (child && child.type === PanelBarItem) {\n      var nestedChildren = void 0;\n      var privateKey = parentPrivateKey.length ? parentPrivateKey[parentPrivateKey.length - 1] + (\".\" + idx) : \".\" + idx;\n\n      if (child.props.children) {\n        nestedChildren = renderChildren(animation, state, handleSelect, child.props.children, (state.expanded || []).indexOf(privateKey) > -1 && parentExpanded, false, parentPrivateKey.concat([privateKey]));\n      }\n\n      return React.cloneElement(child, __assign({}, child.props, {\n        animation: child.props.animation !== undefined ? child.props.animation : animation,\n        id: child.props.id || \"k-panelbar-item-default-\" + privateKey,\n        uniquePrivateKey: privateKey,\n        parentUniquePrivateKey: parentPrivateKey,\n        parentExpanded: parentExpanded,\n        root: root,\n        expanded: (state.expanded || []).indexOf(privateKey) > -1 && parentExpanded,\n        focused: state.focused === privateKey && state.wrapperFocused,\n        selected: state.selected === privateKey,\n        children: nestedChildren,\n        onSelect: handleSelect\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"k-content\"\n      }, child);\n    }\n  });\n};\n/**\n * @hidden\n */\n\nexport var getInitialState = function (props, expandMode, result, _, parentExpanded, parentPrivateKey) {\n  if (result === void 0) {\n    result = {\n      expanded: props.expanded || [],\n      selected: props.selected || '',\n      focused: props.focused || '.0',\n      wrapperFocused: false\n    };\n  }\n\n  if (_ === void 0) {\n    _ = true;\n  }\n\n  if (parentExpanded === void 0) {\n    parentExpanded = true;\n  }\n\n  if (parentPrivateKey === void 0) {\n    parentPrivateKey = [];\n  }\n\n  React.Children.map(props.children, function (child, idx) {\n    if (child && child.type === PanelBarItem) {\n      var privateKey = parentPrivateKey.length ? parentPrivateKey[parentPrivateKey.length - 1] + (\".\" + idx) : \".\" + idx;\n\n      if (!child.props.disabled && parentExpanded) {\n        if (child.props.selected) {\n          result.selected = privateKey;\n        }\n\n        if (child.props.focused) {\n          result.focused = privateKey;\n        }\n\n        if (child.props.expanded) {\n          if (expandMode === 'multiple') {\n            result.expanded.push(privateKey);\n          } else if (expandMode === 'single') {\n            result.expanded = [privateKey];\n          }\n        }\n\n        if (child.props.children) {\n          result = getInitialState(child.props, expandMode, result, false, !!child.props.expanded, parentPrivateKey.concat([privateKey]));\n        }\n      }\n    }\n  });\n  return result;\n};\n/**\n * @hidden\n */\n\nexport function flatVisibleItems(data, flattedItems, _) {\n  if (flattedItems === void 0) {\n    flattedItems = [];\n  }\n\n  if (_ === void 0) {\n    _ = null;\n  }\n\n  (data || []).forEach(function (item) {\n    if (!item.disabled) {\n      flattedItems.push(item);\n\n      if (item.expanded && item.children) {\n        flatVisibleItems(item.children, flattedItems);\n      }\n    }\n  });\n  return flattedItems;\n}\n/**\n * @hidden\n */\n\nexport var isPresent = function (value) {\n  return value !== null && value !== undefined;\n};\n/**\n * Represents the PanelBarUtils functions.\n */\n\nexport var PanelBarUtils;\n\n(function (PanelBarUtils) {\n  /**\n   * Maps a collection of PanelBarItemProps to PanelBarItem components\n   * ([see example]({% slug customization_panelbar %})).\n   * Contained in the `PanelBarUtils` object.\n   *\n   * @param items - A collection of PanelBarItemProps.\n   * @return {PanelBarItem[]} Returns an array of PanelBarItem components.\n   */\n  function mapItemsToComponents(items) {\n    return items.map(function (item, idx) {\n      var children;\n\n      if (item.content) {\n        children = item.content;\n      }\n\n      if (item.children) {\n        children = mapItemsToComponents(item.children);\n      }\n\n      return React.createElement(PanelBarItem, __assign({}, item, {\n        children: children,\n        key: item.id || idx\n      }));\n    });\n  }\n\n  PanelBarUtils.mapItemsToComponents = mapItemsToComponents;\n})(PanelBarUtils || (PanelBarUtils = {}));\n/**\n * @hidden\n */\n\n\nexport var isArrayEqual = function (firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  return firstArray.every(function (ex, i) {\n    return ex === secondArray[i];\n  });\n};","map":null,"metadata":{},"sourceType":"module"}