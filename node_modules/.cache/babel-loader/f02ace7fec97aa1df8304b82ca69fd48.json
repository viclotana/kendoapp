{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { Popup as PopupComponent } from './Popup';\n/**\n * The PopupPropsContext. It allows to configure the Popup props from a wrapper component.\n *\n * @example\n * ```jsx-no-run\n *  <PopupPropsContext.Provider value={props => ({ ...props, appendTo: document.querySelector('myPopupsContainer') })}>\n *      <DropDownList />\n *      <Editor />\n *  </PopupPropsContext.Provider>\n * ```\n */\n\nexport var PopupPropsContext = React.createContext(function (props) {\n  return props;\n});\n/**\n * The KendoReact Popup component.\n */\n\nexport var Popup = React.forwardRef(function (props, ref) {\n  var contextPropsCallback = React.useContext(PopupPropsContext);\n  var popupProps = contextPropsCallback.call(undefined, props);\n  return React.createElement(PopupComponent, __assign({\n    ref: ref\n  }, popupProps));\n});","map":null,"metadata":{},"sourceType":"module"}