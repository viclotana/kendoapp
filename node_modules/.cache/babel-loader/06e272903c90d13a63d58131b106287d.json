{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames, Draggable, Keys } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar SplitterBar =\n/** @class */\nfunction (_super) {\n  __extends(SplitterBar, _super);\n\n  function SplitterBar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onDrag = function (data, isFirst, isLast) {\n      var event = data.event;\n      var _a = _this.props,\n          onDrag = _a.onDrag,\n          index = _a.index;\n      var element = _this.draggable && _this.draggable.element;\n\n      if (!isLast && event) {\n        event.originalEvent.preventDefault();\n      }\n\n      if (element && !_this.isStatic && _this.isDraggable) {\n        onDrag(event, element, index, isFirst, isLast);\n      }\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        focused: true\n      });\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        focused: false\n      });\n    };\n\n    _this.onToggle = function (event) {\n      var _a = _this.props,\n          onToggle = _a.onToggle,\n          index = _a.index,\n          prev = _a.prev,\n          next = _a.next;\n\n      if (prev.collapsible || next.collapsible) {\n        onToggle(prev.collapsible ? index : index + 1, event);\n      }\n    };\n\n    _this.onPrevToggle = function (event) {\n      var _a = _this.props,\n          onToggle = _a.onToggle,\n          index = _a.index,\n          prev = _a.prev;\n\n      if (prev.collapsible) {\n        onToggle(index, event);\n      }\n    };\n\n    _this.onNextToggle = function (event) {\n      var _a = _this.props,\n          onToggle = _a.onToggle,\n          index = _a.index,\n          next = _a.next;\n\n      if (next.collapsible) {\n        onToggle(index + 1, event);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var keyCode = event && event.keyCode;\n      var isHorizontal = _this.isHorizontal;\n      var index = _this.props.index;\n      var element = _this.draggable && _this.draggable.element;\n\n      var onKeyboardResize = function (el, idx, offset) {\n        event.preventDefault();\n\n        _this.props.onKeyboardResize(el, idx, offset, event);\n      };\n\n      if (!element) {\n        return;\n      }\n\n      if (keyCode === Keys.enter) {\n        event.preventDefault();\n\n        _this.onToggle(event);\n      } else if (_this.isDraggable) {\n        if (isHorizontal && keyCode === Keys.left) {\n          onKeyboardResize(element, index, -10);\n        } else if (isHorizontal && keyCode === Keys.right) {\n          onKeyboardResize(element, index, 10);\n        } else if (!isHorizontal && keyCode === Keys.up) {\n          onKeyboardResize(element, index, -10);\n        } else if (!isHorizontal && keyCode === Keys.down) {\n          onKeyboardResize(element, index, 10);\n        }\n      }\n    };\n\n    _this.previousArrowClass = function (isHorizontal) {\n      var _a;\n\n      var prev = _this.props.prev;\n      var isCollapsible = prev.collapsible;\n      var isCollapsed = prev.collapsed;\n      return classNames('k-icon', (_a = {}, _a['k-hidden'] = !isCollapsible, _a['k-collapse-prev'] = isCollapsible, _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && !isCollapsed, _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && isCollapsed, _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && !isCollapsed, _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && isCollapsed, _a));\n    };\n\n    _this.nextArrowClass = function (isHorizontal) {\n      var _a;\n\n      var next = _this.props.next;\n      var isCollapsible = next.collapsible;\n      var isCollapsed = next.collapsed;\n      return classNames('k-icon', (_a = {}, _a['k-hidden'] = !isCollapsible, _a['k-collapse-next'] = isCollapsible, _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && !isCollapsed, _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && isCollapsed, _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && !isCollapsed, _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && isCollapsed, _a));\n    };\n\n    _this.state = {\n      focused: false\n    };\n    return _this;\n  }\n\n  Object.defineProperty(SplitterBar.prototype, \"isStatic\", {\n    get: function () {\n      var _a = this.props,\n          prev = _a.prev,\n          next = _a.next;\n      var betweenResizablePanes = prev.resizable && next.resizable;\n      var nearCollapsiblePane = prev.collapsible || next.collapsible;\n      return !betweenResizablePanes && !nearCollapsiblePane;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SplitterBar.prototype, \"isDraggable\", {\n    get: function () {\n      var _a = this.props,\n          prev = _a.prev,\n          next = _a.next;\n      var betweenResizablePanes = prev.resizable && next.resizable;\n      var nearCollapsedPane = prev.collapsed || next.collapsed;\n      return !!betweenResizablePanes && !nearCollapsedPane;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SplitterBar.prototype, \"isHorizontal\", {\n    get: function () {\n      return this.props.orientation === 'horizontal';\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SplitterBar.prototype.render = function () {\n    var _this = this;\n\n    var _a;\n\n    var isDraggable = this.isDraggable;\n    var isStatic = this.isStatic;\n    var isHorizontal = this.isHorizontal;\n    var barClasses = classNames('k-splitbar', (_a = {}, _a['k-state-focused'] = this.state.focused, _a['k-splitbar-horizontal'] = isHorizontal, _a['k-splitbar-vertical'] = !isHorizontal, _a['k-splitbar-draggable-horizontal'] = isHorizontal && isDraggable, _a['k-splitbar-draggable-vertical'] = !isHorizontal && isDraggable, _a['k-splitbar-static-horizontal'] = isHorizontal && isStatic, _a['k-splitbar-static-vertical'] = !isHorizontal && isStatic, _a));\n    var previousArrowClass = this.previousArrowClass(isHorizontal);\n    var nextArrowClass = this.nextArrowClass(isHorizontal);\n    return React.createElement(Draggable, {\n      onPress: function (event) {\n        return _this.onDrag(event, true, false);\n      },\n      onDrag: function (event) {\n        return _this.onDrag(event, false, false);\n      },\n      onRelease: function (event) {\n        return _this.onDrag(event, false, true);\n      },\n      ref: function (component) {\n        _this.draggable = component;\n      }\n    }, React.createElement(\"div\", {\n      tabIndex: isStatic ? -1 : 0,\n      role: 'separator',\n      className: barClasses,\n      style: {\n        touchAction: 'none'\n      },\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onDoubleClick: this.onToggle,\n      onKeyDown: this.onKeyDown\n    }, React.createElement(\"div\", {\n      className: previousArrowClass,\n      onClick: this.onPrevToggle\n    }), React.createElement(\"div\", {\n      className: 'k-resize-handle'\n    }), React.createElement(\"div\", {\n      className: nextArrowClass,\n      onClick: this.onNextToggle\n    })));\n  };\n\n  return SplitterBar;\n}(React.Component);\n\nexport { SplitterBar };","map":null,"metadata":{},"sourceType":"module"}