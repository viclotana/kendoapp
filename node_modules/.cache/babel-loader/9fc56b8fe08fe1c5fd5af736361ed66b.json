{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DialogTitleBar } from './DialogTitleBar';\nimport { DialogActionsBar } from './DialogActionsBar';\nimport { guid, dispatchEvent, Keys } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata'; // tslint:enable:max-line-length\n\nvar Dialog =\n/** @class */\nfunction (_super) {\n  __extends(Dialog, _super);\n\n  function Dialog(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.DialogRef = React.createRef();\n    _this.titleId = _this.generateTitleId();\n\n    _this.handleCloseDialog = function (event) {\n      event.preventDefault();\n      dispatchEvent(_this.props.onClose, event, _this, undefined);\n    };\n\n    _this.handleKeyDown = function (event) {\n      if (event.keyCode === Keys.esc && _this.props.onClose) {\n        event.preventDefault();\n\n        _this.handleCloseDialog(event);\n      }\n\n      if (event.keyCode === Keys.tab) {\n        var focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n        var modal = document.querySelector('.k-dialog');\n\n        if (modal !== null) {\n          var firstFocusableElement = modal.querySelectorAll(focusableElements)[0];\n          var focusableContent = modal.querySelectorAll(focusableElements);\n          var lastFocusableElement = focusableContent[focusableContent.length - 1];\n\n          if (event.shiftKey) {\n            if (document.activeElement === firstFocusableElement) {\n              lastFocusableElement.focus();\n              event.preventDefault();\n            }\n          } else {\n            if (document.activeElement === lastFocusableElement) {\n              firstFocusableElement.focus();\n              event.preventDefault();\n            }\n          }\n        }\n      }\n    };\n\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Dialog.prototype.componentDidMount = function () {\n    if (this.DialogRef.current && this.props.autoFocus) {\n      this.DialogRef.current.focus();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Dialog.prototype.render = function () {\n    var id = this.props.id !== undefined ? this.props.id : this.titleId;\n    var _a = this.props,\n        title = _a.title,\n        width = _a.width,\n        height = _a.height,\n        children = _a.children,\n        minWidth = _a.minWidth,\n        dir = _a.dir,\n        style = _a.style,\n        contentStyle = _a.contentStyle;\n    var elementsArray = React.Children.toArray(children);\n    var content = this.getContent(elementsArray);\n    var actions = this.getActionBar(elementsArray);\n    var aria = title ? {\n      'aria-labelledby': id\n    } : null;\n    var closeIcon = this.props.closeIcon !== undefined ? this.props.closeIcon : true;\n    return React.createElement(\"div\", {\n      className: 'k-dialog-wrapper' + (this.props.className ? ' ' + this.props.className : ''),\n      onKeyDown: this.handleKeyDown,\n      tabIndex: 0,\n      dir: dir,\n      style: style,\n      ref: this.DialogRef\n    }, React.createElement(\"div\", {\n      className: \"k-overlay\"\n    }), React.createElement(\"div\", __assign({}, aria, {\n      className: \"k-widget k-window k-dialog\",\n      role: \"dialog\",\n      style: {\n        width: width,\n        height: height,\n        minWidth: minWidth\n      }\n    }), this.props.title && React.createElement(DialogTitleBar, {\n      closeIcon: closeIcon,\n      onCloseButtonClick: this.handleCloseDialog,\n      id: id\n    }, title), React.createElement(\"div\", {\n      className: \"k-content k-window-content k-dialog-content\",\n      style: contentStyle\n    }, content), actions));\n  };\n\n  Dialog.prototype.getActionBar = function (children) {\n    return children.filter(function (child) {\n      return child && child.type === DialogActionsBar;\n    });\n  };\n\n  Dialog.prototype.getContent = function (children) {\n    return children.filter(function (child) {\n      return child && child.type !== DialogActionsBar;\n    });\n  };\n\n  Dialog.prototype.generateTitleId = function () {\n    return 'dialog-title' + guid();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Dialog.propTypes = {\n    title: PropTypes.any,\n    id: PropTypes.string,\n    dir: PropTypes.string,\n    style: PropTypes.object,\n    closeIcon: PropTypes.bool,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    autoFocus: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n\n  Dialog.defaultProps = {\n    autoFocus: false\n  };\n  return Dialog;\n}(React.Component);\n\nexport { Dialog };","map":null,"metadata":{},"sourceType":"module"}