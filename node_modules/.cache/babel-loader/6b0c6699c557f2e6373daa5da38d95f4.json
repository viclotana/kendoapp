{"ast":null,"code":"import { DEFAULT_LOCALE } from '../common/constants';\nimport isNumber from '../common/is-number';\nimport datePattern from './date-pattern';\nimport dateNameType from './date-name-type';\nimport { dateFormatRegExp, DATE_FIELD_MAP } from './constants';\nimport { localeInfo } from '../cldr';\nvar NAME_TYPES = {\n  month: {\n    type: 'months',\n    minLength: 3,\n    standAlone: 'L'\n  },\n  quarter: {\n    type: 'quarters',\n    minLength: 3,\n    standAlone: 'q'\n  },\n  weekday: {\n    type: 'days',\n    minLength: {\n      E: 0,\n      c: 3,\n      e: 3\n    },\n    standAlone: 'c'\n  },\n  dayperiod: {\n    type: 'dayPeriods',\n    minLength: 0\n  },\n  era: {\n    type: 'eras',\n    minLength: 0\n  }\n};\nvar LITERAL = 'literal';\n\nfunction addLiteral(parts, value) {\n  var lastPart = parts[parts.length - 1];\n\n  if (lastPart && lastPart.type === LITERAL) {\n    lastPart.pattern += value;\n  } else {\n    parts.push({\n      type: LITERAL,\n      pattern: value\n    });\n  }\n}\n\nfunction isHour12(pattern) {\n  return pattern === 'h' || pattern === 'K';\n}\n\nexport default function splitDateFormat(format, locale) {\n  if (locale === void 0) locale = DEFAULT_LOCALE;\n  var info = localeInfo(locale);\n  var pattern = datePattern(format, info);\n  var parts = [];\n  var lastIndex = dateFormatRegExp.lastIndex = 0;\n  var match = dateFormatRegExp.exec(pattern);\n\n  while (match) {\n    var value = match[0];\n\n    if (lastIndex < match.index) {\n      addLiteral(parts, pattern.substring(lastIndex, match.index));\n    }\n\n    if (value.startsWith('\"') || value.startsWith(\"'\")) {\n      addLiteral(parts, value);\n    } else {\n      var specifier = value[0];\n      var type = DATE_FIELD_MAP[specifier];\n      var part = {\n        type: type,\n        pattern: value\n      };\n\n      if (type === 'hour') {\n        part.hour12 = isHour12(value);\n      }\n\n      var names = NAME_TYPES[type];\n\n      if (names) {\n        var minLength = isNumber(names.minLength) ? names.minLength : names.minLength[specifier];\n        var patternLength = value.length;\n\n        if (patternLength >= minLength) {\n          part.names = {\n            type: names.type,\n            nameType: dateNameType(patternLength),\n            standAlone: names.standAlone === specifier\n          };\n        }\n      }\n\n      parts.push(part);\n    }\n\n    lastIndex = dateFormatRegExp.lastIndex;\n    match = dateFormatRegExp.exec(pattern);\n  }\n\n  if (lastIndex < pattern.length) {\n    addLiteral(parts, pattern.substring(lastIndex));\n  }\n\n  return parts;\n}","map":null,"metadata":{},"sourceType":"module"}