{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { StepperContext } from './context/StepperContext';\nimport { classNames, focusFirstFocusableChild, dispatchEvent } from '@progress/kendo-react-common';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { DEFAULT_ANIMATION_DURATION, NO_ANIMATION } from './contants';\nimport { messages, optionalText } from './messages';\n/**\n * Represents the [KendoReact Step component]({% slug overview_stepper %}).\n *\n * @example\n * ```jsx\n * const steps = [\n *    { label: 'Step 1' },\n *    { label: 'Step 2' },\n *    { label: 'Step 3', optional: true }\n * ];\n *\n * const App = () => {\n *   return (\n *       <Stepper items={steps} value={1}/>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var Step = React.forwardRef(function (props, target) {\n  var // content\n  children = props.children,\n      className = props.className,\n      current = props.current,\n      disabled = props.disabled,\n      focused = props.focused,\n      icon = props.icon,\n      index = props.index,\n      isValid = props.isValid,\n      label = props.label,\n      optional = props.optional,\n      style = props.style,\n      tabIndex = props.tabIndex,\n      text = props.text,\n      others = __rest(props, [\"children\", \"className\", \"current\", \"disabled\", \"focused\", \"icon\", \"index\", \"isValid\", \"label\", \"optional\", \"style\", \"tabIndex\", \"text\"]);\n\n  var _a = React.useContext(StepperContext),\n      animationDuration = _a.animationDuration,\n      isVertical = _a.isVertical,\n      item = _a.item,\n      linear = _a.linear,\n      mode = _a.mode,\n      numOfSteps = _a.numOfSteps,\n      value = _a.value,\n      successIcon = _a.successIcon,\n      errorIcon = _a.errorIcon,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus;\n\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var allowClick = !linear || index === value - 1 || index === value || index === value + 1;\n  var isInLabel = mode === 'labels' || Boolean(icon) && Boolean(label);\n  var localizationService = useLocalization();\n\n  var localizeMessage = function (message) {\n    return localizationService.toLanguageString(message, messages[message]);\n  };\n\n  var optionalMessage = localizeMessage(optionalText);\n  var progressAnimation = typeof animationDuration === 'number' ? animationDuration : animationDuration !== false ? DEFAULT_ANIMATION_DURATION : NO_ANIMATION;\n  var handleClick = React.useCallback(function (event) {\n    if (onChange && !disabled) {\n      dispatchEvent(onChange, event, getImperativeHandle(), {\n        value: index\n      });\n    }\n  }, [onChange, value, disabled]);\n  var handleFocus = React.useCallback(function (event) {\n    if (onFocus && !disabled) {\n      dispatchEvent(onFocus, event, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, disabled]);\n  var itemClassNames = React.useMemo(function () {\n    return classNames('k-step', {\n      'k-step-first': index === 0,\n      'k-step-last': numOfSteps && index === numOfSteps - 1,\n      'k-step-done': index < value,\n      'k-step-current': current,\n      'k-step-optional': optional,\n      'k-step-disabled': disabled,\n      'k-step-focus': focused,\n      'k-step-error': isValid !== undefined && !isValid,\n      'k-step-success': isValid\n    }, className);\n  }, [index, numOfSteps, value, current, optional, disabled, focused, isValid, className]);\n  var itemStyles = React.useMemo(function () {\n    return __assign({\n      maxWidth: !isVertical ? \"calc(100% / \" + numOfSteps + \")\" : undefined,\n      pointerEvents: !allowClick ? 'none' : undefined\n    }, style);\n  }, [isVertical, numOfSteps, style, allowClick]);\n  var validationIconClasses = isValid ? successIcon ? \"\" + successIcon : 'k-icon k-i-check' : errorIcon ? \"\" + errorIcon : 'k-icon k-i-warning';\n  var validationIcons = React.createElement(\"span\", {\n    className: 'k-step-indicator-icon ' + validationIconClasses,\n    \"aria-hidden\": \"true\"\n  });\n  var stepIndicator = React.createElement(React.Fragment, null, mode !== 'labels' ? React.createElement(\"span\", {\n    className: \"k-step-indicator\",\n    \"aria-hidden\": true,\n    style: {\n      transitionDuration: progressAnimation + 'ms'\n    }\n  }, icon ? !isInLabel && isValid !== undefined ? validationIcons : React.createElement(\"span\", {\n    className: \"k-step-indicator-icon k-icon \" + icon\n  }) : isValid !== undefined ? validationIcons : React.createElement(\"span\", {\n    className: \"k-step-indicator-text\"\n  }, text ? text : index + 1)) : null);\n  var stepLabel = React.createElement(\"span\", {\n    className: \"k-step-label\"\n  }, label && React.createElement(\"span\", {\n    className: \"k-step-text\"\n  }, label), isInLabel && isValid !== undefined && validationIcons, optional && React.createElement(\"span\", {\n    className: \"k-step-label-optional\"\n  }, optionalMessage));\n  var stepLink = React.createElement(React.Fragment, null, stepIndicator, stepLabel);\n  return React.createElement(\"li\", __assign({\n    ref: elementRef,\n    className: itemClassNames,\n    style: itemStyles\n  }, others), React.createElement(\"a\", {\n    className: \"k-step-link\",\n    title: label ? label : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    tabIndex: tabIndex ? tabIndex : focused ? 0 : -1,\n    \"aria-current\": current ? 'step' : undefined,\n    \"aria-disabled\": disabled || !allowClick || undefined,\n    \"aria-invalid\": isValid !== undefined && !isValid || undefined\n  }, !item ? stepLink : children));\n});\nStep.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  // content: PropTypes.any,\n  current: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: PropTypes.string,\n  index: PropTypes.number,\n  isValid: PropTypes.bool,\n  label: PropTypes.string,\n  optional: PropTypes.bool,\n  style: PropTypes.object,\n  tabIndex: PropTypes.number,\n  text: PropTypes.string\n};\nvar defaultProps = {\n  tabIndex: 0\n};\nStep.defaultProps = defaultProps;\nStep.displayName = 'KendoStep';","map":null,"metadata":{},"sourceType":"module"}