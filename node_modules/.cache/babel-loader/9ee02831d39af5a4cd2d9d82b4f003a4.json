{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { Reveal } from '@progress/kendo-react-animation';\n/**\n * @hidden\n */\n\nfunction iconElement(_a) {\n  var imageUrl = _a.imageUrl,\n      icon = _a.icon,\n      iconClass = _a.iconClass;\n\n  if (imageUrl) {\n    return React.createElement(\"img\", {\n      role: \"presentation\",\n      className: 'k-image',\n      src: imageUrl\n    });\n  } else if (icon) {\n    var iconClasses = classNames('k-icon', 'k-i-' + icon);\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClasses\n    });\n  } else if (iconClass) {\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClass\n    });\n  }\n\n  return null;\n} // tslint:enable:max-line-length\n\n\nvar PanelBarItem =\n/** @class */\nfunction (_super) {\n  __extends(PanelBarItem, _super);\n\n  function PanelBarItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleItemClick = function () {\n      var _a = _this.props,\n          onSelect = _a.onSelect,\n          disabled = _a.disabled,\n          id = _a.id;\n\n      if (onSelect && !disabled) {\n        onSelect.call(undefined, {\n          uniquePrivateKey: _this.props.uniquePrivateKey,\n          id: id,\n          target: _this\n        });\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  PanelBarItem.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        id = _b.id,\n        children = _b.children,\n        title = _b.title,\n        uniquePrivateKey = _b.uniquePrivateKey,\n        disabled = _b.disabled,\n        selected = _b.selected,\n        focused = _b.focused,\n        expanded = _b.expanded,\n        className = _b.className,\n        root = _b.root,\n        headerClassName = _b.headerClassName,\n        animation = _b.animation;\n    var panelBarItemAriaAttributes = {\n      'role': 'treeitem',\n      'aria-disabled': disabled,\n      'aria-hidden': !disabled && !expanded,\n      'aria-selected': !disabled && selected,\n      'aria-expanded': !disabled && expanded && !!children\n    };\n    var panelBarItemClassName = classNames({\n      'k-item': true,\n      'k-state-default': !disabled,\n      'k-state-expanded': expanded && !!children,\n      'k-state-disabled': disabled\n    }, className);\n    var panelBarHeaderClassName = classNames({\n      'k-link': true,\n      'k-header': root,\n      'k-state-selected': !disabled && selected,\n      'k-state-focused': !disabled && focused\n    }, headerClassName);\n    var panelBarItemArrowClassName = classNames((_a = {}, _a['k-icon'] = true, _a['k-i-arrow-n'] = expanded && !!children, _a['k-panelbar-collapse'] = expanded && !!children, _a['k-i-arrow-s'] = !expanded && !!children, _a['k-panelbar-expand'] = !expanded && !!children, _a));\n    var animationStyle = {\n      display: 'block'\n    };\n    var icon = iconElement(this.props);\n    var arrow = !disabled && children ? React.createElement(\"span\", {\n      className: panelBarItemArrowClassName\n    }) : null;\n    var content = !disabled && expanded ? React.createElement(\"div\", {\n      role: \"group\",\n      className: \"k-panel k-group\"\n    }, children) : null;\n    var child = (animation !== undefined ? animation : true) && !disabled && children ? React.createElement(Reveal, {\n      transitionEnterDuration: 200,\n      transitionExitDuration: 200,\n      key: uniquePrivateKey + '_animation',\n      style: animationStyle,\n      children: content\n    }) : content;\n    return React.createElement(\"div\", __assign({\n      id: id,\n      className: panelBarItemClassName\n    }, panelBarItemAriaAttributes), React.createElement(\"span\", {\n      className: panelBarHeaderClassName,\n      onClick: this.handleItemClick\n    }, icon, title, arrow), child);\n  };\n  /**\n   * @hidden\n   */\n\n\n  PanelBarItem.propTypes = {\n    animation: PropTypes.bool,\n    children: PropTypes.any,\n    className: PropTypes.string,\n    expanded: PropTypes.bool,\n    disabled: PropTypes.bool,\n    onSelect: PropTypes.func,\n    selected: PropTypes.bool,\n    root: PropTypes.bool,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    focused: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n\n  PanelBarItem.defaultProps = {\n    title: 'Untitled'\n  };\n  return PanelBarItem;\n}(React.PureComponent);\n\nexport { PanelBarItem };","map":null,"metadata":{},"sourceType":"module"}