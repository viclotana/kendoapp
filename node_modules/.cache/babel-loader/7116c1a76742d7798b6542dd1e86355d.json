{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { IntlService } from './IntlService';\nimport { GlobalizationContext } from '../globalization/GlobalizationContext';\n/* eslint-disable max-len */\n\n/**\n * A React component which provides an internationalization service. Expects a locale string as a property of the component.\n */\n\nvar IntlProvider =\n/** @class */\nfunction (_super) {\n  __extends(IntlProvider, _super);\n\n  function IntlProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n   */\n\n\n  IntlProvider.prototype.getIntlService = function () {\n    return new IntlService(this.props.locale);\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(GlobalizationContext.Consumer, null, function (glob) {\n      return React.createElement(GlobalizationContext.Provider, {\n        value: __assign({}, glob, {\n          intl: _this.getIntlService()\n        })\n      }, _this.props.children);\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.propTypes = {\n    locale: PropTypes.string\n  };\n  return IntlProvider;\n}(React.Component);\n\nexport default IntlProvider; // tslint:enable:max-line-length","map":null,"metadata":{},"sourceType":"module"}