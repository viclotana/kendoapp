{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DrawerContext } from './context/DrawerContext';\nimport { DrawerItem } from './DrawerItem';\nimport { classNames } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar DEFAULT_EXPANDED_WIDTH = 240;\n/**\n * @hidden\n */\n\nvar DEFAULT_MINI_WIDTH = 50;\n/**\n * @hidden\n */\n\nvar DEFAULT_ANIMATION = {\n  type: 'slide',\n  duration: 200\n};\n/**\n * @hidden\n */\n\nvar NO_ANIMATION = {\n  type: 'slide',\n  duration: 0\n};\n/**\n * Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n *\n * @example\n * ```jsx\n *   const App = () => {\n *       const [expanded, setExpanded] = React.useState(true);\n *       const handleClick = () => setExpanded(prevState => !prevState);\n *\n *       return (\n *           <Drawer expanded={expanded} position='start' mode='push'>\n *               <DrawerNavigation>\n *                   <ul className=\"k-drawer-items\">\n *                       <li className=\"k-drawer-item k-state-selected\">\n *                           <span className=\"k-item-text\">Home</span>\n *                       </li>\n *                       <li className=\"k-drawer-item\">\n *                           <span className=\"k-item-text\">Products</span>\n *                       </li>\n *                       <li className=\"k-drawer-item\">\n *                           <span className=\"k-item-text\">About</span>\n *                       </li>\n *                   </ul>\n *               </DrawerNavigation>\n *               <DrawerContent>\n *                   <button className=\"k-button\" onClick={handleClick}>Toggle the drawer state</button>\n *               </DrawerContent>\n *           </Drawer>\n *       );\n *   };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var DrawerNavigation = React.forwardRef(function (props, target) {\n  var children = props.children,\n      className = props.className,\n      style = props.style;\n\n  var _a = React.useContext(DrawerContext),\n      animation = _a.animation,\n      expanded = _a.expanded,\n      mode = _a.mode,\n      position = _a.position,\n      onOverlayClick = _a.onOverlayClick,\n      mini = _a.mini,\n      dir = _a.dir,\n      width = _a.width,\n      miniWidth = _a.miniWidth,\n      items = _a.items,\n      item = _a.item,\n      onSelect = _a.onSelect;\n\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var customSettings = typeof animation !== 'boolean' ? animation : animation === false ? NO_ANIMATION : DEFAULT_ANIMATION;\n  var navWidth = width ? width : DEFAULT_EXPANDED_WIDTH;\n  var navMiniWidth = miniWidth ? miniWidth : DEFAULT_MINI_WIDTH;\n  React.useImperativeHandle(target, function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  });\n  var navigationClassNames = React.useMemo(function () {\n    return 'k-widget k-drawer ' + classNames({\n      'k-drawer-start': position === 'start',\n      'k-drawer-end': position === 'end'\n    }, className);\n  }, [position]);\n  var expandPush = {\n    opacity: 1,\n    flexBasis: navWidth,\n    WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',\n    transition: 'all ' + (customSettings && customSettings.duration) + 'ms'\n  };\n  var expandOverlay = {\n    opacity: 1,\n    transform: 'translateX(0px)',\n    WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',\n    transition: 'all ' + (customSettings && customSettings.duration) + 'ms'\n  };\n  var collapsePush = {\n    opacity: !mini ? 0 : 1,\n    flexBasis: !mini ? 0 : navMiniWidth,\n    WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',\n    transition: 'all ' + (customSettings && customSettings.duration) + 'ms'\n  };\n  var collapseOverlay = {\n    opacity: 0,\n    transform: 'translateX(-100%)',\n    WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',\n    transition: 'all ' + (customSettings && customSettings.duration) + 'ms'\n  };\n  var collapseOverlayRtl = {\n    opacity: 0,\n    transform: 'translateX(100%)',\n    WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',\n    transition: 'all ' + (customSettings && customSettings.duration) + 'ms'\n  };\n  var collapseOverlayMini = {\n    transform: 'translateX(0%)',\n    WebkitTransitionDuration: (customSettings && customSettings.duration) + 'ms',\n    transitionDuration: (customSettings && customSettings.duration) + 'ms'\n  };\n  var drawerAnimation = expanded ? mode === 'push' ? expandPush : expandOverlay : mode === 'push' ? collapsePush : dir === 'ltr' && position === 'start' || dir === 'rtl' && position === 'end' ? mini ? collapseOverlayMini : collapseOverlay : mini ? collapseOverlayMini : collapseOverlayRtl;\n  var drawerItems = items && React.createElement(\"ul\", {\n    className: 'k-drawer-items'\n  }, items.map(function (element, index) {\n    var drawerItemProps = __assign({\n      index: index\n    }, element, {\n      onSelect: onSelect\n    });\n\n    var ItemComp = item || DrawerItem;\n    return React.createElement(ItemComp, __assign({\n      key: index\n    }, drawerItemProps));\n  }));\n  var drawerNavigation = React.createElement(\"div\", {\n    style: customSettings ? __assign({}, drawerAnimation, style) : style,\n    className: navigationClassNames,\n    ref: elementRef\n  }, React.createElement(\"div\", {\n    className: 'k-drawer-wrapper',\n    style: !expanded && mini && mode === 'overlay' ? {\n      width: navMiniWidth\n    } : {\n      width: navWidth\n    }\n  }, drawerItems || children));\n  return mode === 'overlay' ? React.createElement(React.Fragment, null, expanded && React.createElement(\"div\", {\n    className: \"k-overlay\",\n    onClick: onOverlayClick\n  }), drawerNavigation) : drawerNavigation;\n});\nDrawerNavigation.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  item: PropTypes.any,\n  tabIndex: PropTypes.number\n};\nDrawerNavigation.displayName = 'KendoDrawerNavigation';","map":null,"metadata":{},"sourceType":"module"}