{"ast":null,"code":"import errorDetails from './error-details';\nvar formatRegExp = /\\{(\\d+)}?\\}/g;\n\nvar IntlError = function IntlError(ref) {\n  var name = ref.name;\n  var message = ref.message;\n\n  if (!name || !message) {\n    throw new Error(\"{ name: string, message: string } object is required!\");\n  }\n\n  this.name = name;\n  this.message = message;\n};\n\nIntlError.prototype.formatMessage = function formatMessage() {\n  var values = [],\n      len = arguments.length;\n\n  while (len--) values[len] = arguments[len];\n\n  var flattenValues = flatten(values);\n  var formattedMessage = this.message.replace(formatRegExp, function (match, index) {\n    return flattenValues[parseInt(index, 10)];\n  });\n  return this.name + \": \" + formattedMessage;\n};\n\nIntlError.prototype.error = function error() {\n  var values = [],\n      len = arguments.length;\n\n  while (len--) values[len] = arguments[len];\n\n  return new Error(this.formatMessage(values));\n};\n\nvar flatten = function (arr) {\n  return arr.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n};\n\nvar toIntlErrors = function (errors) {\n  var predicate = function (prev, name) {\n    prev[name] = new IntlError({\n      name: name,\n      message: errors[name]\n    });\n    return prev;\n  };\n\n  return Object.keys(errors).reduce(predicate, {});\n};\n\nvar errors = toIntlErrors(errorDetails);\nexport { errors, IntlError, toIntlErrors };","map":null,"metadata":{},"sourceType":"module"}