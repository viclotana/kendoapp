{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { classNames, focusFirstFocusableChild, guid, useDir, dispatchEvent, Keys } from '@progress/kendo-react-common';\nimport { FILL_CLASSES, ITEM_FLOW_CLASSES, POSITION_MODE_CLASSES, THEME_COLOR_CLASSES } from './models/utils';\nimport { BottomNavigationItem } from './BottomNavigationItem';\n/**\n * Represents the [KendoReact BottomNavigation component]({% slug overview_bottomnavigation %}).\n * Used to switch between primary destinations in an application.\n *\n * @example\n * ```jsx\n * const items = [\n *    { text: 'Photos', icon: 'photo', selected: true },\n *    { text: 'Albums', icon: 'folder' },\n *    { text: 'Search', icon: 'search' },\n *    { text: 'More', icon: 'more-horizontal' },\n * ];\n *\n * const App = () => {\n *   return (\n *       <BottomNavigation items={items} />\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var BottomNavigation = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(ref, getImperativeHandle);\n  var _a = props.themeColor,\n      themeColor = _a === void 0 ? defaultProps.themeColor : _a,\n      _b = props.fill,\n      fill = _b === void 0 ? defaultProps.fill : _b,\n      _c = props.positionMode,\n      positionMode = _c === void 0 ? defaultProps.positionMode : _c,\n      _d = props.itemFlow,\n      itemFlow = _d === void 0 ? defaultProps.itemFlow : _d,\n      _e = props.border,\n      border = _e === void 0 ? defaultProps.border : _e,\n      className = props.className,\n      items = props.items,\n      item = props.item,\n      itemRender = props.itemRender,\n      disabled = props.disabled,\n      style = props.style,\n      id = props.id,\n      onSelect = props.onSelect,\n      onKeyDown = props.onKeyDown;\n  var navId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var dir = useDir(elementRef, props.dir);\n  var navClasses = React.useMemo(function () {\n    return classNames('k-bottom-nav', POSITION_MODE_CLASSES[positionMode], THEME_COLOR_CLASSES[themeColor], FILL_CLASSES[fill], ITEM_FLOW_CLASSES[itemFlow], {\n      'k-bottom-nav-border': border,\n      'k-state-disabled': disabled\n    }, className);\n  }, [positionMode, themeColor, fill, itemFlow, border, disabled, className]);\n  var dispatchSelectEvent = React.useCallback(function (dispatchedEvent, index) {\n    if (!items) {\n      return;\n    }\n\n    if (!items[index].disabled && onSelect) {\n      dispatchEvent(onSelect, dispatchedEvent, getImperativeHandle(), {\n        itemTarget: items[index],\n        itemIndex: index\n      });\n    }\n  }, [items, onSelect]);\n  var handleSelect = React.useCallback(function (event, clickedItemIndex) {\n    dispatchSelectEvent(event, clickedItemIndex);\n  }, [dispatchSelectEvent]);\n  var handleKeyDown = React.useCallback(function (event, clickedItemIndex) {\n    switch (event.keyCode) {\n      case Keys.enter:\n      case Keys.space:\n        dispatchSelectEvent(event, clickedItemIndex);\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n\n    dispatchEvent(onKeyDown, event, getImperativeHandle(), undefined);\n  }, [dispatchSelectEvent, onKeyDown]);\n  return React.createElement(\"nav\", {\n    ref: elementRef,\n    className: navClasses,\n    style: style,\n    id: id || navId,\n    dir: dir\n  }, items && items.map(function (element, index) {\n    return React.createElement(BottomNavigationItem, __assign({}, element, {\n      key: index,\n      index: index,\n      id: (id || navId) + \"-\" + index,\n      disabled: disabled || element.disabled,\n      selected: element.selected,\n      dataItem: element,\n      item: item,\n      render: itemRender,\n      onSelect: handleSelect,\n      onKeyDown: handleKeyDown\n    }));\n  }));\n});\nvar defaultProps = {\n  themeColor: 'primary',\n  fill: 'flat',\n  itemFlow: 'vertical',\n  positionMode: 'fixed',\n  border: true\n};\nBottomNavigation.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  id: PropTypes.string,\n  dir: PropTypes.string,\n  themeColor: PropTypes.oneOf(['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']),\n  fill: PropTypes.oneOf(['solid', 'flat']),\n  itemFlow: PropTypes.oneOf(['vertical', 'horizontal']),\n  border: PropTypes.bool,\n  disabled: PropTypes.bool,\n  selected: PropTypes.number,\n  onSelect: PropTypes.func\n};\nBottomNavigation.defaultProps = defaultProps;\nBottomNavigation.displayName = 'KendoReactBottomNavigation';","map":null,"metadata":{},"sourceType":"module"}