{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, getTabIndex } from '@progress/kendo-react-common';\nimport { DrawerContext } from './context/DrawerContext';\n/**\n * Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n *\n * @example\n * ```jsx\n *    const App = () => {\n *      const [stateVisible, setStateVisible] = React.useState(true);\n *      const handleClick = () => { setStateVisible(prevState => !prevState); };\n *\n *      return (\n *        <Drawer expanded={stateVisible} mode={'push'}>\n *            <DrawerNavigation>\n *                <DrawerItem text=\"Inbox\" icon=\"k-i-inbox\" />\n *                <DrawerItem separator={true} />\n *                <DrawerItem text=\"Notifications\" icon=\"k-i-bell\" disabled={true}/>\n *                <DrawerItem text=\"Calendar\" icon=\"k-i-calendar\"/>\n *                <DrawerItem separator={true} />\n *                <DrawerItem text=\"Attachments\" icon=\"k-i-hyperlink-email\" selected={true}/>\n *                <DrawerItem text=\"Favourites\" icon=\"k-i-star-outline\"/>\n *            </DrawerNavigation>\n *            <DrawerContent><button className=\"k-button\" onClick={handleClick}>Toggle the drawer state</button></DrawerContent>\n *        </Drawer>\n *      );\n *    };\n *\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var DrawerItem = React.forwardRef(function (props, target) {\n  var className = props.className,\n      style = props.style,\n      text = props.text,\n      icon = props.icon,\n      separator = props.separator,\n      disabled = props.disabled,\n      selected = props.selected,\n      onSelect = props.onSelect,\n      index = props.index,\n      tabIndex = props.tabIndex,\n      children = props.children,\n      others = __rest(props, [\"className\", \"style\", \"text\", \"icon\", \"separator\", \"disabled\", \"selected\", \"onSelect\", \"index\", \"tabIndex\", \"children\"]);\n\n  var _a = React.useContext(DrawerContext),\n      expanded = _a.expanded,\n      mini = _a.mini,\n      item = _a.item;\n\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement,\n      props: props\n    };\n  });\n  var itemClassNames = classNames('k-drawer-item', {\n    'k-state-selected': selected,\n    'k-state-disabled': disabled\n  }, className);\n  var handleClick = React.useCallback(function () {\n    if (onSelect && !disabled) {\n      var handle = {\n        element: elementRef.current,\n        focus: focusElement,\n        props: props\n      };\n      onSelect(handle, index);\n    }\n  }, [onSelect, index, disabled]);\n  var drawerItemContent = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n    className: 'k-icon ' + icon\n  }), !expanded && mini ? null : React.createElement(\"span\", {\n    className: 'k-item-text'\n  }, text));\n  return separator ? React.createElement(\"li\", {\n    className: 'k-drawer-item k-drawer-separator'\n  }) : React.createElement(\"li\", __assign({\n    ref: elementRef,\n    className: itemClassNames,\n    style: style,\n    \"aria-selected\": selected,\n    \"aria-disabled\": disabled,\n    role: \"option\",\n    onClick: handleClick,\n    tabIndex: getTabIndex(tabIndex, disabled)\n  }, others), !item ? drawerItemContent : children);\n});\nDrawerItem.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  text: PropTypes.string,\n  icon: PropTypes.string,\n  separator: PropTypes.bool,\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  targetItem: PropTypes.any\n};\nDrawerItem.displayName = 'KendoDrawerItem';","map":null,"metadata":{},"sourceType":"module"}