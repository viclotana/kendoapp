{"ast":null,"code":"import { cldr, getLocaleInfo } from './info';\nimport { errors } from '../errors';\nimport localeTerritory from './territory';\nimport parseRangeDate from './parse-range-date';\n/* eslint-disable consistent-return */\n\nvar NoCurrency = errors.NoCurrency;\nvar NoCurrencyDisplay = errors.NoCurrencyDisplay;\nvar NoSupplementalCurrency = errors.NoSupplementalCurrency;\nvar NoCurrencyRegion = errors.NoCurrencyRegion;\nvar NoValidCurrency = errors.NoValidCurrency;\nvar DEFAULT_CURRENCY_FRACTIONS = 2;\nvar SYMBOL = \"symbol\";\nvar INVALID_CURRENCY_CODE = 'XXX';\nvar GLOBAL_CURRENCIES = {\n  '001': 'USD',\n  // 001 refers to world. not sure if it is correct to assume USD but seems better than throw an error\n  '150': 'EUR' // 150 territory for Europe\n\n};\n\nfunction getCurrencyInfo(locale, currency, throwIfNoValid) {\n  var info = getLocaleInfo(locale);\n  var currencies = info.numbers.currencies;\n\n  if (!currencies) {\n    if (throwIfNoValid) {\n      throw NoCurrency.error();\n    }\n\n    return;\n  }\n\n  var currencyDisplayInfo = currencies[currency];\n\n  if (!currencyDisplayInfo) {\n    if (throwIfNoValid) {\n      throw NoCurrencyDisplay.error();\n    }\n\n    return;\n  }\n\n  return currencyDisplayInfo;\n}\n\nfunction lengthComparer(a, b) {\n  return b.length - a.length;\n}\n\nfunction regionCurrency(regionCurrencies) {\n  var latestValidUntil, latestValidUntilRange;\n  var latestStillValid, latestStillValidDate;\n\n  for (var idx = 0; idx < regionCurrencies.length; idx++) {\n    var currency = regionCurrencies[idx];\n    var code = Object.keys(currency)[0];\n    var info = currency[code];\n\n    if (code !== INVALID_CURRENCY_CODE && info._tender !== 'false' && info._from) {\n      if (!info._to) {\n        var stillValidDate = parseRangeDate(info._from);\n\n        if (!latestStillValidDate || latestStillValidDate < stillValidDate) {\n          latestStillValid = code;\n          latestStillValidDate = stillValidDate;\n        }\n      } else if (!latestStillValid) {\n        var validFrom = parseRangeDate(info._from);\n        var validTo = parseRangeDate(info._to);\n\n        if (!latestValidUntilRange || latestValidUntilRange.to < validTo || latestValidUntilRange.from < validFrom) {\n          latestValidUntil = code;\n          latestValidUntilRange = {\n            from: validFrom,\n            to: validTo\n          };\n        }\n      }\n    }\n  }\n\n  return latestStillValid || latestValidUntil;\n}\n\nexport function currencyDisplays(locale, currency, throwIfNoValid) {\n  if (throwIfNoValid === void 0) throwIfNoValid = true;\n  var currencyInfo = getCurrencyInfo(locale, currency, throwIfNoValid);\n\n  if (!currencyInfo) {\n    return;\n  }\n\n  if (!currencyInfo.displays) {\n    var displays = [currency];\n\n    for (var field in currencyInfo) {\n      displays.push(currencyInfo[field]);\n    }\n\n    displays.sort(lengthComparer);\n    currencyInfo.displays = displays;\n  }\n\n  return currencyInfo.displays;\n}\nexport function currencyDisplay(locale, options) {\n  var value = options.value;\n  var currency = options.currency;\n  var currencyDisplay = options.currencyDisplay;\n  if (currencyDisplay === void 0) currencyDisplay = SYMBOL;\n\n  if (currencyDisplay === \"code\") {\n    return currency;\n  }\n\n  var currencyInfo = getCurrencyInfo(locale, currency, true);\n  var result;\n\n  if (currencyDisplay === SYMBOL) {\n    result = currencyInfo[\"symbol-alt-narrow\"] || currencyInfo[SYMBOL];\n  } else {\n    if (typeof value === undefined || value !== 1) {\n      result = currencyInfo[\"displayName-count-other\"];\n    } else {\n      result = currencyInfo[\"displayName-count-one\"];\n    }\n  }\n\n  return result;\n}\nexport function currencyFractionOptions(code) {\n  var minimumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\n  var maximumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\n  var fractions = ((cldr.supplemental.currencyData || {}).fractions || {})[code];\n\n  if (fractions && fractions._digits) {\n    maximumFractionDigits = minimumFractionDigits = parseInt(fractions._digits, 10);\n  }\n\n  return {\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: maximumFractionDigits\n  };\n}\nexport function territoryCurrencyCode(territory, throwIfNoValid) {\n  if (throwIfNoValid === void 0) throwIfNoValid = true;\n\n  if (GLOBAL_CURRENCIES[territory]) {\n    return GLOBAL_CURRENCIES[territory];\n  }\n\n  var currencyData = cldr.supplemental.currencyData;\n\n  if (!currencyData) {\n    if (throwIfNoValid) {\n      throw NoSupplementalCurrency.error();\n    }\n\n    return;\n  }\n\n  var regionCurrencies = currencyData.region[territory];\n\n  if (!regionCurrencies) {\n    if (throwIfNoValid) {\n      throw NoCurrencyRegion.error(territory);\n    }\n\n    return;\n  }\n\n  var currencyCode = regionCurrency(regionCurrencies);\n  return currencyCode;\n}\nexport function localeCurrency(locale, throwIfNoValid) {\n  var info = getLocaleInfo(locale);\n  var numbers = info.numbers;\n\n  if (!numbers.localeCurrency) {\n    var currency = territoryCurrencyCode(localeTerritory(info), throwIfNoValid);\n\n    if (!currency && throwIfNoValid) {\n      throw NoValidCurrency.error(info.name);\n    }\n\n    numbers.localeCurrency = currency;\n  }\n\n  return numbers.localeCurrency;\n}","map":null,"metadata":{},"sourceType":"module"}