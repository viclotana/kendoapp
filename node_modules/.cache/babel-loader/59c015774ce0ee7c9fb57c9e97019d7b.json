{"ast":null,"code":"import { PERCENT, SCIENTIFIC, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, EMPTY, POINT } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport formatCurrencySymbol from './format-currency-symbol';\nimport groupInteger from './group-integer';\nimport isCurrencyStyle from './is-currency-style';\nimport pad from '../common/pad';\nimport round from '../common/round';\nimport { currencyFractionOptions } from '../cldr';\nvar DEFAULT_DECIMAL_ROUNDING = 3;\nvar DEFAULT_PERCENT_ROUNDING = 0;\nvar trailingZeroRegex = /0+$/;\n\nfunction fractionOptions(options) {\n  var minimumFractionDigits = options.minimumFractionDigits;\n  var maximumFractionDigits = options.maximumFractionDigits;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style);\n  var currencyFractions;\n\n  if (isCurrency) {\n    currencyFractions = currencyFractionOptions(options.currency);\n  }\n\n  if (minimumFractionDigits === undefined) {\n    minimumFractionDigits = isCurrency ? currencyFractions.minimumFractionDigits : 0;\n  }\n\n  if (maximumFractionDigits === undefined) {\n    if (style === PERCENT) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_PERCENT_ROUNDING);\n    } else if (isCurrency) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, currencyFractions.maximumFractionDigits);\n    } else {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_DECIMAL_ROUNDING);\n    }\n  }\n\n  return {\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: maximumFractionDigits\n  };\n}\n\nfunction applyPattern(value, pattern, symbol) {\n  var result = EMPTY;\n\n  for (var idx = 0, length = pattern.length; idx < length; idx++) {\n    var ch = pattern.charAt(idx);\n\n    if (ch === NUMBER_PLACEHOLDER) {\n      result += value;\n    } else if (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) {\n      result += symbol;\n    } else {\n      result += ch;\n    }\n  }\n\n  return result;\n}\n\nfunction currencyUnitPattern(info, value) {\n  var currencyInfo = info.numbers.currency;\n  var pattern = value !== 1 ? currencyInfo[\"unitPattern-count-other\"] : currencyInfo[\"unitPattern-count-one\"];\n\n  if (value < 0) {\n    pattern = pattern.replace(NUMBER_PLACEHOLDER, \"-\" + NUMBER_PLACEHOLDER);\n  }\n\n  return pattern;\n}\n\nexport default function standardNumberFormat(number, options, info) {\n  var symbols = info.numbers.symbols;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style); //return number in exponential format\n\n  if (style === SCIENTIFIC) {\n    var exponential = options.minimumFractionDigits !== undefined ? number.toExponential(options.minimumFractionDigits) : number.toExponential();\n    return exponential.replace(POINT, symbols.decimal);\n  }\n\n  var value = number;\n  var symbol;\n\n  if (isCurrency) {\n    options.value = value;\n    symbol = formatCurrencySymbol(info, options);\n  }\n\n  if (style === PERCENT) {\n    value *= 100;\n    symbol = symbols.percentSign;\n  }\n\n  var ref = fractionOptions(options);\n  var minimumFractionDigits = ref.minimumFractionDigits;\n  var maximumFractionDigits = ref.maximumFractionDigits;\n  value = round(value, maximumFractionDigits);\n  var negative = value < 0;\n  var negativeZero = isNegativeZero(number);\n  var parts = value.split(POINT);\n  var integer = parts[0];\n  var fraction = pad(parts[1] ? parts[1].replace(trailingZeroRegex, EMPTY) : EMPTY, minimumFractionDigits, true); //exclude \"-\" if number is negative.\n\n  if (negative) {\n    integer = integer.substring(1);\n  }\n\n  if (options.minimumIntegerDigits) {\n    integer = pad(integer, options.minimumIntegerDigits);\n  }\n\n  var formattedValue = options.useGrouping !== false ? groupInteger(integer, 0, integer.length, options, info) : integer;\n\n  if (fraction) {\n    formattedValue += symbols.decimal + fraction;\n  }\n\n  var pattern;\n\n  if (isCurrency && options.currencyDisplay === \"name\") {\n    pattern = currencyUnitPattern(info, number);\n  } else {\n    var patterns = options.patterns;\n    pattern = negative || negativeZero ? patterns[1] || \"-\" + patterns[0] : patterns[0];\n  }\n\n  if (pattern === NUMBER_PLACEHOLDER && !negative) {\n    return formattedValue;\n  }\n\n  var result = applyPattern(formattedValue, pattern, symbol);\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}