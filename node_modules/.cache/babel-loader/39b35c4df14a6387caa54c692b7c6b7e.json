{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useAnimation } from '@progress/kendo-react-animation';\nimport { classNames, useRtl, getTabIndex } from '@progress/kendo-react-common';\nimport { calculatePercentage, updateProgress, truncateNumber } from '../common/utils';\nimport { usePrevious } from './hooks/usePrevious';\nimport { DEFAULT_ANIMATION_DURATION, NO_ANIMATION } from '../common/constants';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact ProgressBar component]({% slug overview_progressbar %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *       <ProgressBar value={75}/>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var ProgressBar = React.forwardRef(function (props, target) {\n  validatePackage(packageMetadata);\n  var animation = props.animation,\n      disabled = props.disabled,\n      _a = props.reverse,\n      reverse = _a === void 0 ? defaultProps.reverse : _a,\n      orientation = props.orientation,\n      labelVisible = props.labelVisible,\n      labelPlacement = props.labelPlacement,\n      _b = props.max,\n      max = _b === void 0 ? defaultProps.max : _b,\n      _c = props.min,\n      min = _c === void 0 ? defaultProps.min : _c,\n      tabIndex = props.tabIndex,\n      className = props.className,\n      style = props.style,\n      emptyStyle = props.emptyStyle,\n      emptyClassName = props.emptyClassName,\n      progressStyle = props.progressStyle,\n      progressClassName = props.progressClassName;\n  var elementRef = React.useRef(null);\n  var progressStatusRef = React.useRef(null);\n  var progressStatusWrapRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: elementRef.current,\n      progressStatusElement: progressStatusRef.current,\n      progressStatusWrapElement: progressStatusWrapRef.current,\n      focus: focusElement\n    };\n  });\n  var value = props.value || defaultProps.value;\n  var prevValue = usePrevious(value);\n  var indeterminateProp = props.value === null;\n  var dir = useRtl(elementRef, props.dir);\n  var isVertical = orientation === 'vertical';\n  var formattedLabel = truncateNumber(value);\n  var labelProps = {\n    value: value\n  };\n  var renderLabel = labelVisible ? props.label ? React.createElement(\"span\", {\n    className: 'k-progress-status'\n  }, React.createElement(props.label, __assign({}, labelProps))) : React.createElement(\"span\", {\n    className: 'k-progress-status'\n  }, formattedLabel) : undefined;\n  var wrapperProps = {\n    className: classNames('k-widget k-progressbar', {\n      'k-progressbar-horizontal': !isVertical,\n      'k-progressbar-vertical': isVertical,\n      'k-progressbar-reverse': reverse,\n      'k-progressbar-indeterminate': indeterminateProp,\n      'k-state-disabled': disabled\n    }, className),\n    ref: elementRef,\n    dir: dir,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    role: 'progressbar',\n    'aria-valuemin': min,\n    'aria-valuemax': max,\n    'aria-valuenow': indeterminateProp ? undefined : value,\n    'aria-disabled': disabled,\n    style: style\n  };\n  var positionClasses = classNames('k-progress-status-wrap', {\n    'k-progress-start': labelPlacement === 'start',\n    'k-progress-center': labelPlacement === 'center',\n    'k-progress-end': labelPlacement === 'end' || labelPlacement === undefined\n  });\n  var animationDuration = typeof animation !== 'boolean' && animation !== undefined ? animation.duration : animation ? DEFAULT_ANIMATION_DURATION : NO_ANIMATION;\n  var handleStart = React.useCallback(function () {\n    var percentage = calculatePercentage(min, max, prevValue);\n    updateProgress(progressStatusRef, progressStatusWrapRef, percentage, isVertical);\n  }, [prevValue]);\n  var handleUpdate = React.useCallback(function (progress) {\n    var percentage = calculatePercentage(min, max, prevValue + (value - prevValue) * progress);\n    updateProgress(progressStatusRef, progressStatusWrapRef, percentage, isVertical);\n  }, [value, prevValue]);\n  var handleEnd = React.useCallback(function () {\n    var percentage = calculatePercentage(min, max, value);\n    updateProgress(progressStatusRef, progressStatusWrapRef, percentage, isVertical);\n  }, [value]);\n  useAnimation({\n    duration: animationDuration,\n    onStart: handleStart,\n    onUpdate: handleUpdate,\n    onEnd: handleEnd\n  }, [value, animationDuration]);\n  return React.createElement(\"div\", __assign({}, wrapperProps), React.createElement(\"span\", {\n    className: positionClasses + (emptyClassName ? ' ' + emptyClassName : ''),\n    style: emptyStyle\n  }, renderLabel), React.createElement(\"div\", {\n    className: 'k-state-selected',\n    style: progressStyle,\n    ref: progressStatusRef\n  }, React.createElement(\"span\", {\n    className: positionClasses + (progressClassName ? ' ' + progressClassName : ''),\n    ref: progressStatusWrapRef\n  }, renderLabel)));\n});\nProgressBar.propTypes = {\n  animation: PropTypes.any,\n  disabled: PropTypes.bool,\n  reverse: PropTypes.bool,\n  label: PropTypes.any,\n  labelVisible: PropTypes.bool,\n  labelPlacement: PropTypes.oneOf(['start', 'center', 'end']),\n  max: PropTypes.number,\n  min: PropTypes.number,\n  value: PropTypes.number,\n  tabIndex: PropTypes.number,\n  emptyStyle: PropTypes.object,\n  emptyClassName: PropTypes.string,\n  progressStyle: PropTypes.object,\n  progressClassName: PropTypes.string\n};\nvar defaultProps = {\n  animation: false,\n  min: 0,\n  max: 100,\n  value: 0,\n  disabled: false,\n  reverse: false,\n  labelVisible: true\n};\nProgressBar.defaultProps = defaultProps;\nProgressBar.displayName = 'KendoProgressBar';","map":null,"metadata":{},"sourceType":"module"}