{"ast":null,"code":"import formatString from '../common/format-string';\nimport isString from '../common/is-string';\nimport { EMPTY } from '../common/constants';\nvar REMOVAL_PENALTY = 120;\nvar ADDITION_PENALTY = 20;\nvar LENGHT_DELTA = [2, 1, 5, 3, 4];\nvar LONG_LESS_PENALTY_DELTA = -2;\nvar SHORT_LESS_PENALTY_DELTA = -1;\nvar SHORT_MORE_PENALTY_DELTA = 1;\nvar LONG_MORE_PENALTY_DELTA = 2;\nvar PENALTIES = {};\nPENALTIES[LONG_LESS_PENALTY_DELTA.toString()] = 8;\nPENALTIES[SHORT_LESS_PENALTY_DELTA.toString()] = 6;\nPENALTIES[LONG_MORE_PENALTY_DELTA.toString()] = 6;\nPENALTIES[SHORT_MORE_PENALTY_DELTA.toString()] = 3;\nvar VALUE_FORMAT_LENGTH = {\n  numeric: 1,\n  \"2-digit\": 2,\n  short: 3,\n  long: 4,\n  narrow: 5\n};\nvar TIME_SPECIFIERS_REGEX = /[hHmsSzZoOvVxX]/;\n\nfunction getHourSpecifier(options) {\n  return options.hour12 ? \"h\" : \"H\";\n}\n\nvar DATE_OPTIONS_MAP = [{\n  key: \"era\",\n  specifier: \"G\"\n}, {\n  key: \"year\",\n  specifier: \"y\"\n}, {\n  key: \"month\",\n  specifier: \"M\"\n}, {\n  key: \"day\",\n  specifier: \"d\"\n}, {\n  key: \"weekday\",\n  specifier: \"E\"\n}, {\n  key: \"hour\",\n  getSpecifier: getHourSpecifier\n}, {\n  key: \"minute\",\n  specifier: \"m\"\n}, {\n  key: \"second\",\n  specifier: \"s\"\n}, {\n  key: \"timeZoneName\",\n  specifier: \"z\"\n}];\nvar STAND_ALONE_SPECIFIERS = {\n  e: 'c',\n  E: 'c',\n  M: 'L',\n  Q: 'q'\n};\nvar specifiersRegex = {};\nvar resolvedFormats = {};\n\nfunction getSpecifierRegex(specifier) {\n  if (!specifiersRegex[specifier]) {\n    specifiersRegex[specifier] = new RegExp(specifier + \"+\");\n  }\n\n  return specifiersRegex[specifier];\n}\n\nfunction skeletonSpecifiers(skeleton) {\n  var result = [];\n  var current = skeleton.charAt(0);\n  var specifier = current;\n\n  for (var idx = 1; idx < skeleton.length; idx++) {\n    var character = skeleton.charAt(idx);\n\n    if (character === specifier) {\n      current += character;\n    } else {\n      result.push(current);\n      current = specifier = character;\n    }\n  }\n\n  result.push(current);\n  return result;\n}\n\nfunction findBestMatch(specifiers, availableFormats) {\n  var specifiersLength = specifiers.length;\n  var maxScore = -Number.MAX_VALUE;\n  var bestMatches, result;\n\n  for (var format in availableFormats) {\n    var matches = [];\n    var currentFormat = format.replace(\"v\", \"z\");\n    var score = 0;\n\n    for (var idx = 0; idx < specifiersLength; idx++) {\n      var specifier = specifiers[idx];\n      var specifierRegex = getSpecifierRegex(specifier[0]);\n      var match = (specifierRegex.exec(currentFormat) || [])[0];\n\n      if (!match) {\n        score -= REMOVAL_PENALTY;\n      } else {\n        currentFormat = currentFormat.replace(match, EMPTY);\n\n        if (match.length !== specifier.length) {\n          var delta = Math.max(Math.min(LENGHT_DELTA[match.length] - LENGHT_DELTA[specifier.length], 2), -2);\n          score -= PENALTIES[delta];\n        }\n      }\n\n      matches.push(match);\n\n      if (score < maxScore) {\n        break;\n      }\n    }\n\n    if (currentFormat.length) {\n      score -= skeletonSpecifiers(currentFormat).length * ADDITION_PENALTY;\n    }\n\n    if (score > maxScore) {\n      maxScore = score;\n      bestMatches = matches;\n      result = availableFormats[format];\n    }\n  }\n\n  result = result.replace(\"v\", \"z\");\n\n  for (var idx$1 = 0; idx$1 < specifiersLength; idx$1++) {\n    var bestMatch = bestMatches[idx$1];\n\n    if (bestMatch && bestMatch !== specifiers[idx$1]) {\n      var matchSpecifier = bestMatches[idx$1][0];\n      result = result.replace(getSpecifierRegex(matchSpecifier), specifiers[idx$1]);\n\n      if (STAND_ALONE_SPECIFIERS[matchSpecifier]) {\n        result = result.replace(getSpecifierRegex(STAND_ALONE_SPECIFIERS[matchSpecifier]), specifiers[idx$1]);\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction cacheFormat(skeleton, format, locale) {\n  if (!resolvedFormats[locale]) {\n    resolvedFormats[locale] = {};\n  }\n\n  resolvedFormats[locale][skeleton] = format;\n}\n\nfunction skeletonFormat(skeleton, info) {\n  var availableFormats = info.calendar.dateTimeFormats.availableFormats;\n\n  if (availableFormats[skeleton]) {\n    return availableFormats[skeleton];\n  }\n\n  if (resolvedFormats[info.name] && resolvedFormats[info.name][skeleton]) {\n    return resolvedFormats[info.name][skeleton];\n  }\n\n  var timeStartIndex = skeleton.search(TIME_SPECIFIERS_REGEX);\n  var result;\n\n  if (timeStartIndex > 0) {\n    var dateSkeleton = skeleton.substr(0, timeStartIndex);\n    var timeSkeleton = skeleton.substr(timeStartIndex);\n    result = formatString(info.calendar.dateTimeFormats.short, //should be deterimed based on specifiers\n    availableFormats[timeSkeleton] || findBestMatch(skeletonSpecifiers(timeSkeleton), availableFormats), availableFormats[dateSkeleton] || findBestMatch(skeletonSpecifiers(dateSkeleton), availableFormats));\n  } else {\n    result = findBestMatch(skeletonSpecifiers(skeleton), availableFormats);\n  }\n\n  cacheFormat(skeleton, result, info.name);\n  return result;\n}\n\nfunction skeletonFromOptions(options) {\n  var result = [];\n\n  for (var idx = 0; idx < DATE_OPTIONS_MAP.length; idx++) {\n    var option = DATE_OPTIONS_MAP[idx];\n    var field = option.key;\n    var value = options[field];\n\n    if (value) {\n      var spcifier = option.specifier || option.getSpecifier(options);\n      result.push(spcifier.repeat(VALUE_FORMAT_LENGTH[value]));\n    }\n  }\n\n  return result.join(EMPTY);\n}\n\nexport default function datePattern(format, info) {\n  var calendar = info.calendar;\n  var result;\n\n  if (isString(format)) {\n    if (calendar.patterns[format]) {\n      result = calendar.patterns[format];\n    } else {\n      result = format;\n    }\n  } else if (format) {\n    if (format.pattern) {\n      return format.pattern;\n    }\n\n    var skeleton = format.skeleton;\n\n    if (!skeleton) {\n      if (format.datetime) {\n        result = formatString(calendar.dateTimeFormats[format.datetime], calendar.timeFormats[format.datetime], calendar.dateFormats[format.datetime]);\n      } else if (format.date) {\n        result = calendar.dateFormats[format.date];\n      } else if (format.time) {\n        result = calendar.timeFormats[format.time];\n      } else {\n        skeleton = skeletonFromOptions(format);\n      }\n    }\n\n    if (skeleton) {\n      result = skeletonFormat(skeleton, info);\n    }\n  }\n\n  if (!result) {\n    result = calendar.patterns.d;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}