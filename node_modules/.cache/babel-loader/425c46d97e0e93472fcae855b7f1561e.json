{"ast":null,"code":"import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n/* eslint-disable max-len */\n\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.intl ? component.context.intl : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.localization ? component.context.localization : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForIntl(component) {\n  component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForLocalization(component) {\n  component.contextType = GlobalizationContext;\n} // tslint:enable:max-line-length","map":null,"metadata":{},"sourceType":"module"}