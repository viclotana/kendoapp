{"ast":null,"code":"import { adjustDST, convertTimeZone } from './time-utils';\nimport { localeInfo } from '../cldr';\nimport { DEFAULT_LOCALE, EMPTY } from '../common/constants';\nimport { errors } from '../errors';\nimport formatNames from './format-names';\nimport datePattern from './date-pattern';\nimport round from '../common/round';\nimport isDate from '../common/is-date';\nvar timeZoneOffsetRegExp = /([+|\\-]\\d{1,2})(:?)(\\d{2})?/;\nvar dateRegExp = /^\\/Date\\((.*?)\\)\\/$/;\nvar offsetRegExp = /[+-]\\d*/;\nvar numberRegExp = {\n  2: /^\\d{1,2}/,\n  3: /^\\d{1,3}/,\n  4: /^\\d{4}/\n};\nvar numberRegex = /\\d+/;\nvar PLACEHOLDER = \"{0}\";\nvar leadingSpacesRegex = /^ */;\nvar trailingSpacesRegex = / *$/;\nvar standardDateFormats = [\"yyyy/MM/dd HH:mm:ss\", \"yyyy/MM/dd HH:mm\", \"yyyy/MM/dd\", \"E MMM dd yyyy HH:mm:ss\", \"yyyy-MM-ddTHH:mm:ss.SSSSSSSXXX\", \"yyyy-MM-ddTHH:mm:ss.SSSXXX\", \"yyyy-MM-ddTHH:mm:ss.SSXXX\", \"yyyy-MM-ddTHH:mm:ssXXX\", \"yyyy-MM-ddTHH:mm:ss.SSSSSSS\", \"yyyy-MM-ddTHH:mm:ss.SSS\", \"yyyy-MM-ddTHH:mmXXX\", \"yyyy-MM-ddTHH:mmX\", \"yyyy-MM-ddTHH:mm:ss\", \"yyyy-MM-ddTHH:mm\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd HH:mm\", \"yyyy-MM-dd\", \"HH:mm:ss\", \"HH:mm\"];\nvar FORMATS_SEQUENCE = [\"G\", \"g\", \"F\", \"Y\", \"y\", \"M\", \"m\", \"D\", \"d\", \"y\", \"T\", \"t\"];\nvar TWO_DIGIT_YEAR_MAX = 2029;\n\nfunction outOfRange(value, start, end) {\n  return !(value >= start && value <= end);\n}\n\nfunction lookAhead(match, state) {\n  var format = state.format;\n  var idx = state.idx;\n  var i = 0;\n\n  while (format[idx] === match) {\n    i++;\n    idx++;\n  }\n\n  if (i > 0) {\n    idx -= 1;\n  }\n\n  state.idx = idx;\n  return i;\n}\n\nfunction getNumber(size, state) {\n  var regex = size ? numberRegExp[size] || new RegExp('^\\\\d{1,' + size + '}') : numberRegex,\n      match = state.value.substr(state.valueIdx, size).match(regex);\n\n  if (match) {\n    match = match[0];\n    state.valueIdx += match.length;\n    return parseInt(match, 10);\n  }\n\n  return null;\n}\n\nfunction getIndexByName(names, state, lower) {\n  var i = 0,\n      length = names.length,\n      name,\n      nameLength,\n      matchLength = 0,\n      matchIdx = 0,\n      subValue;\n\n  for (; i < length; i++) {\n    name = names[i];\n    nameLength = name.length;\n    subValue = state.value.substr(state.valueIdx, nameLength);\n\n    if (lower) {\n      subValue = subValue.toLowerCase();\n    }\n\n    if (subValue === name && nameLength > matchLength) {\n      matchLength = nameLength;\n      matchIdx = i;\n    }\n  }\n\n  if (matchLength) {\n    state.valueIdx += matchLength;\n    return matchIdx + 1;\n  }\n\n  return null;\n}\n\nfunction checkLiteral(state) {\n  var result = false;\n\n  if (state.value.charAt(state.valueIdx) === state.format[state.idx]) {\n    state.valueIdx++;\n    result = true;\n  }\n\n  return result;\n}\n\nfunction calendarGmtFormats(calendar) {\n  var gmtFormat = calendar.gmtFormat;\n  var gmtZeroFormat = calendar.gmtZeroFormat;\n\n  if (!gmtFormat) {\n    throw errors.NoGMTInfo.error();\n  }\n\n  return [gmtFormat.replace(PLACEHOLDER, EMPTY).toLowerCase(), gmtZeroFormat.replace(PLACEHOLDER, EMPTY).toLowerCase()];\n}\n\nfunction parseTimeZoneOffset(state, info, options) {\n  var shortHours = options.shortHours;\n  var noSeparator = options.noSeparator;\n  var optionalMinutes = options.optionalMinutes;\n  var localizedName = options.localizedName;\n  var zLiteral = options.zLiteral;\n  state.UTC = true;\n\n  if (zLiteral && state.value.charAt(state.valueIdx) === \"Z\") {\n    state.valueIdx++;\n    return false;\n  }\n\n  if (localizedName && !getIndexByName(calendarGmtFormats(info.calendar), state, true)) {\n    return true;\n  }\n\n  var matches = timeZoneOffsetRegExp.exec(state.value.substr(state.valueIdx, 6));\n\n  if (!matches) {\n    return !localizedName;\n  }\n\n  var hoursMatch = matches[1];\n  var minutesMatch = matches[3];\n  var hoursOffset = parseInt(hoursMatch, 10);\n  var separator = matches[2];\n  var minutesOffset = parseInt(minutesMatch, 10);\n\n  if (isNaN(hoursOffset) || !shortHours && hoursMatch.length !== 3 || !optionalMinutes && isNaN(minutesOffset) || noSeparator && separator) {\n    return true;\n  }\n\n  if (isNaN(minutesOffset)) {\n    minutesOffset = null;\n  }\n\n  if (outOfRange(hoursOffset, -12, 13) || minutesOffset && outOfRange(minutesOffset, 0, 59)) {\n    return true;\n  }\n\n  state.valueIdx += matches[0].length;\n  state.hoursOffset = hoursOffset;\n  state.minutesOffset = minutesOffset;\n}\n\nfunction parseMonth(ch, state, info) {\n  var count = lookAhead(ch, state);\n  var names = formatNames(info, \"months\", count, ch === \"L\", true);\n  var month = count < 3 ? getNumber(2, state) : getIndexByName(names, state, true);\n\n  if (month === null || outOfRange(month, 1, 12)) {\n    return true;\n  }\n\n  state.month = month - 1;\n}\n\nfunction parseDayOfWeek(ch, state, info) {\n  var count = lookAhead(ch, state);\n  var names = formatNames(info, \"days\", count, ch === \"c\", true);\n  var dayOfWeek = count < 3 ? getNumber(1, state) : getIndexByName(names, state, true);\n\n  if (!dayOfWeek && dayOfWeek !== 0 || outOfRange(dayOfWeek, 1, 7)) {\n    return true;\n  }\n}\n\nvar parsers = {};\n\nparsers.d = function (state) {\n  lookAhead(\"d\", state);\n  var day = getNumber(2, state);\n\n  if (day === null || outOfRange(day, 1, 31)) {\n    return true;\n  }\n\n  if (state.day === null) {\n    state.day = day;\n  }\n};\n\nparsers.E = function (state, info) {\n  var count = lookAhead(\"E\", state); //validate if it matches the day?\n\n  var dayOfWeek = getIndexByName(formatNames(info, \"days\", count, false, true), state, true);\n\n  if (dayOfWeek === null) {\n    return true;\n  }\n};\n\nparsers.M = function (state, info) {\n  return parseMonth(\"M\", state, info);\n};\n\nparsers.L = function (state, info) {\n  return parseMonth(\"L\", state, info);\n};\n\nparsers.y = function (state) {\n  var count = lookAhead(\"y\", state);\n  var year = getNumber(count === 1 ? undefined : count, state);\n\n  if (year === null) {\n    return true;\n  }\n\n  if (count === 2) {\n    var currentYear = new Date().getFullYear();\n    year = currentYear - currentYear % 100 + year;\n\n    if (year > TWO_DIGIT_YEAR_MAX) {\n      year -= 100;\n    }\n  }\n\n  state.year = year;\n};\n\nparsers.h = function (state) {\n  lookAhead(\"h\", state);\n  var hours = getNumber(2, state);\n\n  if (hours === 12) {\n    hours = 0;\n  }\n\n  if (hours === null || outOfRange(hours, 0, 11)) {\n    return true;\n  }\n\n  state.hours = hours;\n};\n\nparsers.K = function (state) {\n  lookAhead(\"K\", state);\n  var hours = getNumber(2, state);\n\n  if (hours === null || outOfRange(hours, 0, 11)) {\n    return true;\n  }\n\n  state.hours = hours;\n};\n\nparsers.a = function (state, info) {\n  var count = lookAhead(\"a\", state);\n  var periodFormats = formatNames(info, \"dayPeriods\", count, false, true);\n  var pmHour = getIndexByName([periodFormats.pm], state, true);\n\n  if (!pmHour && !getIndexByName([periodFormats.am], state, true)) {\n    return true;\n  }\n\n  state.pmHour = pmHour;\n};\n\nparsers.H = function (state) {\n  lookAhead(\"H\", state);\n  var hours = getNumber(2, state);\n\n  if (hours === null || outOfRange(hours, 0, 23)) {\n    return true;\n  }\n\n  state.hours = hours;\n};\n\nparsers.k = function (state) {\n  lookAhead(\"k\", state);\n  var hours = getNumber(2, state);\n\n  if (hours === null || outOfRange(hours, 1, 24)) {\n    return true;\n  }\n\n  state.hours = hours === 24 ? 0 : hours;\n};\n\nparsers.m = function (state) {\n  lookAhead(\"m\", state);\n  var minutes = getNumber(2, state);\n\n  if (minutes === null || outOfRange(minutes, 0, 59)) {\n    return true;\n  }\n\n  state.minutes = minutes;\n};\n\nparsers.s = function (state) {\n  lookAhead(\"s\", state);\n  var seconds = getNumber(2, state);\n\n  if (seconds === null || outOfRange(seconds, 0, 59)) {\n    return true;\n  }\n\n  state.seconds = seconds;\n};\n\nparsers.S = function (state) {\n  var count = lookAhead(\"S\", state);\n  var match = state.value.substr(state.valueIdx, count);\n  var milliseconds = null;\n\n  if (!isNaN(parseInt(match, 10))) {\n    milliseconds = parseFloat(\"0.\" + match, 10);\n    milliseconds = round(milliseconds, 3);\n    milliseconds *= 1000;\n    state.valueIdx += count;\n  }\n\n  if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {\n    return true;\n  }\n\n  state.milliseconds = milliseconds;\n};\n\nparsers.z = function (state, info) {\n  var count = lookAhead(\"z\", state);\n  var shortFormat = count < 4;\n  var invalid = parseTimeZoneOffset(state, info, {\n    shortHours: shortFormat,\n    optionalMinutes: shortFormat,\n    localizedName: true\n  });\n\n  if (invalid) {\n    return invalid;\n  }\n};\n\nparsers.Z = function (state, info) {\n  var count = lookAhead(\"Z\", state);\n  var invalid = parseTimeZoneOffset(state, info, {\n    noSeparator: count < 4,\n    zLiteral: count === 5,\n    localizedName: count === 4\n  });\n\n  if (invalid) {\n    return invalid;\n  }\n};\n\nparsers.x = function (state, info) {\n  var count = lookAhead(\"x\", state);\n  var invalid = parseTimeZoneOffset(state, info, {\n    noSeparator: count !== 3 && count !== 5,\n    optionalMinutes: count === 1\n  });\n\n  if (invalid) {\n    return invalid;\n  }\n};\n\nparsers.X = function (state, info) {\n  var count = lookAhead(\"X\", state);\n  var invalid = parseTimeZoneOffset(state, info, {\n    noSeparator: count !== 3 && count !== 5,\n    optionalMinutes: count === 1,\n    zLiteral: true\n  });\n\n  if (invalid) {\n    return invalid;\n  }\n};\n\nparsers.G = function (state, info) {\n  var count = lookAhead(\"G\", state);\n  var eras = formatNames(info, \"eras\", count, false, true);\n  var era = getIndexByName([eras[0], eras[1]], state, true);\n\n  if (era === null) {\n    return true;\n  }\n};\n\nparsers.e = function (state, info) {\n  return parseDayOfWeek(\"e\", state, info);\n};\n\nparsers.c = function (state, info) {\n  return parseDayOfWeek(\"c\", state, info);\n};\n\nfunction createDate(state) {\n  var year = state.year;\n  var month = state.month;\n  var day = state.day;\n  var hours = state.hours;\n  var minutes = state.minutes;\n  var seconds = state.seconds;\n  var milliseconds = state.milliseconds;\n  var pmHour = state.pmHour;\n  var UTC = state.UTC;\n  var hoursOffset = state.hoursOffset;\n  var minutesOffset = state.minutesOffset;\n  var hasTime = hours !== null || minutes !== null || seconds || null;\n  var date = new Date();\n  var result;\n\n  if (year === null && month === null && day === null && hasTime) {\n    year = date.getFullYear();\n    month = date.getMonth();\n    day = date.getDate();\n  } else {\n    if (year === null) {\n      year = date.getFullYear();\n    }\n\n    if (day === null) {\n      day = 1;\n    }\n  }\n\n  if (pmHour && hours < 12) {\n    hours += 12;\n  }\n\n  if (UTC) {\n    if (hoursOffset) {\n      hours += -hoursOffset;\n    }\n\n    if (minutesOffset) {\n      minutes += -minutesOffset * (hoursOffset < 0 ? -1 : 1);\n    }\n\n    result = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));\n  } else {\n    result = new Date(year, month, day, hours, minutes, seconds, milliseconds);\n    adjustDST(result, hours);\n  }\n\n  if (year < 100) {\n    result.setFullYear(year);\n  }\n\n  if (result.getDate() !== day && UTC === undefined) {\n    return null;\n  }\n\n  return result;\n}\n\nfunction addFormatSpaces(value, format) {\n  var leadingSpaces = leadingSpacesRegex.exec(format)[0];\n  var trailingSpaces = trailingSpacesRegex.exec(format)[0];\n  return \"\" + leadingSpaces + value + trailingSpaces;\n}\n\nfunction parseExact(value, format, info) {\n  var pattern = datePattern(format, info).split(EMPTY);\n  var state = {\n    format: pattern,\n    idx: 0,\n    value: addFormatSpaces(value, format),\n    valueIdx: 0,\n    year: null,\n    month: null,\n    day: null,\n    hours: null,\n    minutes: null,\n    seconds: null,\n    milliseconds: null\n  };\n  var length = pattern.length;\n  var literal = false;\n\n  for (; state.idx < length; state.idx++) {\n    var ch = pattern[state.idx];\n\n    if (literal) {\n      if (ch === \"'\") {\n        literal = false;\n      }\n\n      checkLiteral(state);\n    } else {\n      if (parsers[ch]) {\n        var invalid = parsers[ch](state, info);\n\n        if (invalid) {\n          return null;\n        }\n      } else if (ch === \"'\") {\n        literal = true;\n        checkLiteral(state);\n      } else if (!checkLiteral(state)) {\n        return null;\n      }\n    }\n  }\n\n  if (state.valueIdx < value.length) {\n    return null;\n  }\n\n  return createDate(state) || null;\n}\n\nfunction parseMicrosoftDateOffset(offset) {\n  var sign = offset.substr(0, 1) === \"-\" ? -1 : 1;\n  var result = offset.substring(1);\n  result = parseInt(result.substr(0, 2), 10) * 60 + parseInt(result.substring(2), 10);\n  return sign * result;\n}\n\nfunction parseMicrosoftDateFormat(value) {\n  if (value && value.indexOf(\"/D\") === 0) {\n    var date = dateRegExp.exec(value);\n\n    if (date) {\n      date = date[1];\n      var tzoffset = offsetRegExp.exec(date.substring(1));\n      date = new Date(parseInt(date, 10));\n\n      if (tzoffset) {\n        tzoffset = parseMicrosoftDateOffset(tzoffset[0]);\n        date = convertTimeZone(date, date.getTimezoneOffset(), 0);\n        date = convertTimeZone(date, 0, -1 * tzoffset);\n      }\n\n      return date;\n    }\n  }\n}\n\nfunction defaultFormats(calendar) {\n  var formats = [];\n  var patterns = calendar.patterns;\n  var length = FORMATS_SEQUENCE.length;\n\n  for (var idx = 0; idx < length; idx++) {\n    formats.push(patterns[FORMATS_SEQUENCE[idx]]);\n  }\n\n  return formats.concat(standardDateFormats);\n}\n\nexport default function parseDate(value, formats, locale) {\n  if (locale === void 0) locale = DEFAULT_LOCALE;\n\n  if (!value) {\n    return null;\n  }\n\n  if (isDate(value)) {\n    return value;\n  }\n\n  var parseValue = String(value).trim();\n  var date = parseMicrosoftDateFormat(parseValue);\n\n  if (date) {\n    return date;\n  }\n\n  var info = localeInfo(locale);\n  var parseFormats = formats || defaultFormats(info.calendar);\n  parseFormats = Array.isArray(parseFormats) ? parseFormats : [parseFormats];\n  var length = parseFormats.length;\n\n  for (var idx = 0; idx < length; idx++) {\n    date = parseExact(parseValue, parseFormats[idx], info);\n\n    if (date) {\n      return date;\n    }\n  }\n\n  return date;\n}","map":null,"metadata":{},"sourceType":"module"}