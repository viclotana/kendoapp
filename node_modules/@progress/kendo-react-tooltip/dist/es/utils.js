var arrowWidth = 10;
var arrowHeight = 10;
/**
 * @hidden
 */
export var getLeftPosition = function (left, elementWidth, targetElement, anchorElement, position) {
    switch (position) {
        case 'bottom':
            return anchorElement === 'pointer'
                ? left - (elementWidth / 2)
                : targetElement.left - (elementWidth / 2) + targetElement.width / 2;
        case 'left':
            return anchorElement === 'pointer'
                ? left - elementWidth - arrowWidth
                : targetElement.left - elementWidth - arrowWidth;
        case 'right':
            return anchorElement === 'pointer'
                ? left + arrowWidth
                : targetElement.right + arrowWidth;
        case 'top':
            return anchorElement === 'pointer'
                ? left - (elementWidth / 2)
                : targetElement.left - (elementWidth / 2) + targetElement.width / 2;
        default:
            if (anchorElement === 'pointer') {
                return left < (window.screen.availWidth / 2)
                    ? left - arrowWidth
                    : left - elementWidth + arrowWidth;
            }
            else {
                return left < (window.screen.availWidth / 2)
                    ? targetElement.left
                    : targetElement.right - elementWidth;
            }
    }
};
/**
 * @hidden
 */
export var getTopPosition = function (top, targetElement, elementHeight, anchorElement, position) {
    switch (position) {
        case 'bottom':
            return anchorElement === 'pointer'
                ? top + arrowHeight
                : targetElement.bottom + arrowHeight;
        case 'left':
            return anchorElement === 'pointer'
                ? top - (elementHeight / 2)
                : targetElement.top - (elementHeight / 2) + (targetElement.height / 2);
        case 'right':
            return anchorElement === 'pointer'
                ? top - (elementHeight / 2)
                : targetElement.top - (elementHeight / 2) + (targetElement.height / 2);
        case 'top':
            return anchorElement === 'pointer'
                ? top - elementHeight - arrowHeight
                : targetElement.top - elementHeight - arrowHeight;
        default:
            if (anchorElement === 'pointer') {
                return top < (window.innerHeight / 2)
                    ? top + arrowWidth
                    : top - elementHeight - arrowWidth;
            }
            else {
                return top < (window.innerHeight / 2)
                    ? targetElement.bottom + arrowHeight
                    : targetElement.top - elementHeight - arrowHeight;
            }
    }
};
/**
 * @hidden
 */
export var getDomRect = function (currentTarget) {
    if (currentTarget !== null) {
        return currentTarget.getBoundingClientRect();
    }
    return document.body.getBoundingClientRect();
};
/**
 * @hidden
 */
export var toolTipSelectors = [
    'k-tooltip-content',
    'k-animation-container',
    'k-tooltip',
    'k-tooltip-title',
    'k-tooltip k-tooltip-closable',
    'k-icon k-i-close'
];
/**
 * @hidden
 */
export var isTooltipElement = function (element) {
    if (element === null) {
        return false;
    }
    var node = element;
    while (node) {
        if (node !== null && node.className === 'k-tooltip') {
            return true;
        }
        node.parentNode !== null ? node = node.parentNode : node = false;
    }
    return toolTipSelectors.filter(function (t) { return t === element.className; }).length > 0;
};
//# sourceMappingURL=utils.js.map