import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TileStrictPosition, TileLayoutItem } from './interfaces/main';
/**
 * @hidden
 */
export interface InternalTileProps extends TileLayoutItem {
    update: (index: number, dRow: number, dCol: number, row: number, col: number) => void;
    index: number;
    defaultPosition: TileStrictPosition;
}
/**
 * @hidden
 */
export declare class InternalTile extends React.Component<InternalTileProps, {
    rtl: boolean;
}> {
    /**
     * @hidden
     */
    static propTypes: {
        defaultPosition: PropTypes.Validator<object>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        hintStyle: PropTypes.Requireable<object>;
        hintClassName: PropTypes.Requireable<string>;
        header: PropTypes.Requireable<any>;
        body: PropTypes.Requireable<any>;
        item: PropTypes.Requireable<any>;
        resizable: PropTypes.Requireable<string | boolean>;
        reorderable: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static defaultProps: {
        resizable: boolean;
        reorderable: boolean;
    };
    state: {
        rtl: boolean;
    };
    oldSize: {};
    draggable: {
        element: HTMLElement | null;
    } | null;
    dragging: boolean;
    resizing: boolean;
    element: HTMLElement | null;
    readonly dragElement: HTMLElement;
    pressOffset: {
        x: number;
        y: number;
    };
    pressXY: {
        x: number;
        y: number;
    };
    currentTranslate: {
        x: number;
        y: number;
    };
    preventDataOps: any;
    handleResize: (e: any, q: {
        end: boolean;
        direction: any;
    }) => void;
    handlePress: (e: any) => void;
    handleDrag: (e: any) => void;
    handleRelease: () => void;
    componentDidMount(): void;
    render(): JSX.Element;
    /**
     * @hidden
     */
    getSnapshotBeforeUpdate(_: any): any;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: any): void;
}
