/// <reference types="react" />
import { BaseEvent } from '@progress/kendo-react-common';
import { TileLayout } from '../TileLayout';
/**
 * The interface for describing items that can be passed to the `items` property of the TileLayout component.
 */
export interface TileLayoutItem {
    /**
     * The position which is used when the TileLayout is in uncontrolled mode
     * ([see example]({% slug tiles_tilelayout %}#toc-position-and-dimensions)).
     */
    defaultPosition?: TilePosition;
    /**
     * Sets additional CSS styles to the TileLayoutItem.
     */
    style?: React.CSSProperties;
    /**
     * Sets additional classes to the TileLayoutItem.
     */
    className?: string;
    /**
     * Sets additional CSS styles to the TileLayoutItem hint element.
     */
    hintStyle?: React.CSSProperties;
    /**
     * Sets additional classes to the TileLayoutItem hint element.
     */
    hintClassName?: string;
    /**
     * Sets the title in the TileLayoutItem's header
     * ([see example]({% slug tiles_tilelayout %})).
     */
    header?: React.ReactNode;
    /**
     * Sets the content in TileLayoutItem's body
     * ([see example]({% slug tiles_tilelayout %})).
     */
    body?: React.ReactNode;
    /**
     * Overrides the default rendering of the TileLayoutItem
     * ([see example]({% slug tiles_tilelayout %}#toc-custom-rendering)).
     */
    item?: React.ReactNode;
    /**
     * Specifies if the user is allowed to resize the TileLayoutItem and in which direction
     * ([see example]({% slug tiles_tilelayout %}#toc-resizing)).
     * If `resizable` is not specified, the resizing of the TileLayoutItem will be enabled for both directions.
     */
    resizable?: TileResizeMode;
    /**
     * Specifies if the user is allowed to reorder the TileLayoutItem by dragging and dropping it
     * ([see example]({% slug tiles_tilelayout %}#toc-reordering)).
     * If `reorderable` is not specified, the dragging functionality of the TileLayoutItem will be enabled.
     */
    reorderable?: boolean;
}
/**
 * Specifies the position of each tile.
 */
export interface TilePosition {
    /**
     * Defines the order index of the TileLayoutItem.
     * If not set, items will receive a sequential order.
     */
    order?: number;
    /**
     * (Required) Defines on which column-line the TileLayoutItem will start.
     * It is required in order reordering and resizing functionalities to work as expected as they rely on it.
     */
    col: number;
    /**
     * Specifies how many columns will the TileLayoutItem spans.
     * Defaults to `1`.
     */
    colSpan?: number;
    /**
     * Defines on which row-line the TileLayoutItem will start.
     */
    row?: number;
    /**
     * Specifies how many rows will the TileLayoutItem spans.
     * Defaults to `1`.
     */
    rowSpan?: number;
}
/**
 * Specifies the strict position of each tile.
 * Used in the [TileLayoutRepositionEvent]({% slug api_layout_tilelayoutrepositionevent %}).
 */
export interface TileStrictPosition extends TilePosition {
    /**
     * Defines the order index of the TileLayoutItem.
     * If not set, items will receive a sequential order.
     */
    order: number;
    /**
     * Specifies how many rows will the TileLayoutItem spans.
     * Defaults to `1`.
     */
    rowSpan: number;
    /**
     * Specifies how many columns will the TileLayoutItem spans.
     * Defaults to `1`.
     */
    colSpan: number;
}
/**
 * Specifies if the user is allowed to resize the TileLayoutItem and in which direction
 * ([see example]({% slug tiles_tilelayout %}#toc-resizing)).
 * If `resizable` is not specified, the resizing of the TileLayoutItem will be enabled for both directions.
 */
export declare type TileResizeMode = 'horizontal' | 'vertical' | boolean;
/**
 * Specifies the gaps between the tiles.
 */
export interface TileLayoutGap {
    /**
     * The rows gap between tiles.
     * Defaults to `16px`.
     */
    rows?: number | string;
    /**
     * The columns gap between tiles.
     * Defaults to `16px`.
     */
    columns?: number | string;
}
/**
 * Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the TileLayout.
 * For further reference, check [grid-auto-flow CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow) article.
 * Defaults to `column`.
 */
export declare type TileLayoutAutoFlow = 'column' | 'row' | 'column dense' | 'row dense' | 'unset';
/**
 * The arguments for the `onReposition` TileLayout event.
 */
export interface TileLayoutRepositionEvent extends BaseEvent<TileLayout> {
    /**
     * The new positions of the TileLayout tiles.
     */
    value: Array<TileStrictPosition>;
}
