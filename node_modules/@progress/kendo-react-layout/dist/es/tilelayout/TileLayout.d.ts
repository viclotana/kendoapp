import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TileLayoutGap, TileLayoutItem, TilePosition, TileLayoutRepositionEvent, TileStrictPosition, TileLayoutAutoFlow } from './interfaces/main';
/**
 * Represents the properties of [TileLayout](% slug overview_tilelayout %) component.
 */
export interface TileLayoutProps {
    /**
     * Sets the `id` property of the root element.
     */
    id?: string;
    /**
     * Sets additional CSS styles to the TileLayout.
     */
    style?: React.CSSProperties;
    /**
     * Sets additional classes to the TileLayout.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Specifies the gaps between the tiles ([see example]({% slug overview_tilelayout %}#toc-tilelayout-configuration-options)).
     *
     * * The possible keys are:
     * * `rows`
     * * `columns`
     */
    gap?: TileLayoutGap;
    /**
     * Specifies the default number of columns ([see example]({% slug overview_tilelayout %}#toc-tilelayout-configuration-options)).
     */
    columns?: number;
    /**
     * Specifies the default width of the columns ([see example]({% slug overview_tilelayout %}#toc-tilelayout-configuration-options)).
     */
    columnWidth?: number | string;
    /**
     * Specifies the default height of the rows ([see example]({% slug overview_tilelayout %}#toc-tilelayout-configuration-options)).
     */
    rowHeight?: number | string;
    /**
     * The collection of items that will be rendered in the TileLayout
     * ([see example]({% slug overview_tilelayout %}#toc-tilelayout-configuration-options)).
     */
    items?: TileLayoutItem[];
    /**
     * The list of tiles' positions which are used when the TileLayout is in controlled mode
     * ([see example]({% slug tiles_tilelayout %}#toc-controlling-the-position)).
     */
    positions?: TilePosition[];
    /**
     * Fires when the user repositions the tile by either dragging or resizing
     * ([see example]({% slug tiles_tilelayout %}#toc-controlling-the-position)).
     */
    onReposition?: (event: TileLayoutRepositionEvent) => void;
    /**
     * Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the TileLayout.
     * For further reference, check [grid-auto-flow CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow) article.
     * Defaults to `column`
     * ([see example]({% slug autoflows_tilelayout %})).
     */
    autoFlow?: TileLayoutAutoFlow;
}
/**
 * @hidden
 */
export interface TileLayoutState {
    positions: TileStrictPosition[];
}
/**
 * Represents the [KendoReact TileLayout component]({% slug overview_tilelayout %}).
 */
export declare class TileLayout extends React.Component<TileLayoutProps, TileLayoutState> {
    /**
     * @hidden
     */
    static propTypes: {
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
        gap: PropTypes.Requireable<object>;
        columns: PropTypes.Requireable<number>;
        columnWidth: PropTypes.Requireable<string | number>;
        rowHeight: PropTypes.Requireable<string | number>;
        items: PropTypes.Requireable<any[]>;
        positions: PropTypes.Requireable<any[]>;
        autoFlow: PropTypes.Requireable<string>;
        onReposition: PropTypes.Requireable<(...args: any[]) => any>;
    };
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    _element: HTMLDivElement | null;
    /**
     * @hidden
     */
    state: {
        positions: ({
            order: number;
            rowSpan: number;
            colSpan: number;
        } & TilePosition)[];
    };
    /**
     * Gets the HTML element of the TileLayout component.
     */
    readonly element: HTMLDivElement | null;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: TileLayoutProps, state: TileLayoutState): {
        positions: ({
            order: number;
            rowSpan: number;
            colSpan: number;
        } & TilePosition)[];
    };
    /**
     * @hidden
     */
    update: (index: number, dOrder: number, dCol: number, dRowSpan?: number, dColSpan?: number) => void;
    render(): JSX.Element;
}
