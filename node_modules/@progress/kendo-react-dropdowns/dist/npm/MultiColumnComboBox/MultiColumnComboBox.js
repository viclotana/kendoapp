"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var MultiColumnList_1 = require("./../common/MultiColumnList");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var ComboBox_1 = require("../ComboBox/ComboBox");
var columnWidth = function (width, defaultWidth) {
    if (width) {
        return typeof width === 'number' ? width + 'px' : width;
    }
    return defaultWidth;
};
/**
 * Represents the MultiColumnComboBox component.
 */
exports.MultiColumnComboBox = React.forwardRef(function (props, ref) {
    var target = React.useRef(null);
    var comboBoxRef = React.useRef(null);
    var _a = React.useState(0), scrollbarWidth = _a[0], setScrollbarWidth = _a[1];
    var _b = props.columns, columns = _b === void 0 ? defaultProps.columns : _b, _c = props.popupSettings, popupSettings = _c === void 0 ? defaultProps.popupSettings : _c, other = __rest(props, ["columns", "popupSettings"]);
    var focus = React.useCallback(function () {
        if (comboBoxRef.current) {
            comboBoxRef.current.focus();
        }
    }, [comboBoxRef]);
    React.useImperativeHandle(target, function () { return ({
        element: comboBoxRef && comboBoxRef.current && comboBoxRef.current.element,
        focus: focus,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var popupWidth = React.useMemo(function () {
        return "calc(" + columns.map(function (column) { return columnWidth(column.width, defaultProps.width); }).filter(Boolean).join(' + ') + " + " + scrollbarWidth + "px)";
    }, [columns, scrollbarWidth]);
    var header = React.useMemo(function () { return (React.createElement(React.Fragment, null,
        props.header,
        React.createElement("div", { className: "k-grid-header", style: { paddingRight: scrollbarWidth } },
            React.createElement("div", { className: "k-grid-header-wrap" },
                React.createElement("table", { role: "presentation" },
                    React.createElement("colgroup", null, columns.map(function (column, i) {
                        return (React.createElement("col", { key: column.uniqueKey ? column.uniqueKey : i, style: { width: column.width ? column.width : defaultProps.width } }));
                    })),
                    React.createElement("tbody", null,
                        React.createElement("tr", null, columns.map(function (column, i) {
                            return (React.createElement("th", { key: column.uniqueKey ? column.uniqueKey : i, className: "k-header" }, column.header || '\u00A0'));
                        })))))))); }, [props.header, columns, scrollbarWidth]);
    var skip = props.virtual ? props.virtual.skip : 0;
    var itemRender = React.useCallback(function (li, liProps) {
        var children = columns.map(function (column, i) { return (React.createElement("span", { className: "k-cell", style: { width: column.width ? column.width : defaultProps.width }, key: column.uniqueKey ? column.uniqueKey : i }, column.field ? kendo_react_common_1.getter(column.field)(liProps.dataItem) : '')); });
        var group = undefined;
        var curGroup, prevGroup, groupGetter, data = props.data || [];
        var index = liProps.index - skip;
        if (props.groupField !== undefined) {
            groupGetter = kendo_react_common_1.getter(props.groupField);
            curGroup = groupGetter(data[index]);
            prevGroup = groupGetter(data[index - 1]);
            if (curGroup && prevGroup && curGroup !== prevGroup) {
                group = curGroup;
            }
        }
        if (group) {
            children.push(React.createElement("div", { key: "group", className: "k-cell k-group-cell" },
                React.createElement("span", null, group)));
        }
        var rendering = React.cloneElement(li, __assign({}, li.props), children);
        return props.itemRender ? props.itemRender.call(undefined, rendering, liProps) : rendering;
    }, [columns, props.groupField, props.itemRender, props.data, skip]);
    var handleChange = React.useCallback(function (event) {
        if (props.onChange) {
            props.onChange.call(undefined, __assign({}, event, { target: target.current }));
        }
    }, [props.onChange, target]);
    React.useEffect(function () {
        setScrollbarWidth((new kendo_react_common_1.BrowserSupportService()).scrollbarWidth);
    }, []);
    return (React.createElement(ComboBox_1.default, __assign({ list: MultiColumnList_1.MultiColumnList, onChange: handleChange, popupSettings: __assign({ width: popupWidth }, popupSettings, { className: kendo_react_common_1.classNames('k-dropdowngrid-popup k-popup-flush', popupSettings.className) }) }, other, { header: header, itemRender: itemRender })));
});
var propTypes = __assign({}, ComboBox_1.default.propTypes, { columns: PropTypes.any.isRequired });
var defaultProps = {
    columns: [],
    popupSettings: {},
    width: '200px'
};
exports.MultiColumnComboBox.displayName = 'KendoMultiColumnComboBox';
// TODO: delete casting when @types/react is updated!
exports.MultiColumnComboBox.propTypes = propTypes;
exports.MultiColumnComboBox.defaultProps = defaultProps;
//# sourceMappingURL=MultiColumnComboBox.js.map